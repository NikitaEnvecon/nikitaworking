-----------------------------------------------------------------------------
--
--  Logical unit: MdmBasicDataHeader
--  Type:         EntityWithState
--  Component:    MDMGT
--
--  Template:     3.0
--  Built by:     IFS Developer Studio
--
--  NOTE! Do not edit!! This file is completely generated and will be
--        overwritten next time the corresponding model is saved.
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
-------------------- PRIVATE VIEW DEFINITIONS -------------------------------
-----------------------------------------------------------------------------

PROMPT Creating MDM_BASIC_DATA_HEADER view

CREATE OR REPLACE VIEW MDM_BASIC_DATA_HEADER AS
SELECT
       template_id                    template_id,
       revision                       revision,
       description                    description,
       created_by                     created_by,
       created_date                   created_date,
       profile_id                     profile_id,
       notes                          notes,
       rowstate                       objstate,
       Mdm_Basic_Data_Header_API.Finite_State_Events__(rowstate)                     objevents,
       Mdm_Basic_Data_Header_API.Finite_State_Decode__(rowstate)                         state,
       rowkey                         objkey,
       to_char(rowversion,'YYYYMMDDHH24MISS') objversion,
       rowid                          objid
FROM   mdm_basic_data_header_tab
WITH   READ ONLY;

COMMENT ON TABLE MDM_BASIC_DATA_HEADER
   IS 'LU=MdmBasicDataHeader^PROMPT=Mdm Basic Data Header^MODULE=MDMGT^';

COMMENT ON COLUMN MDM_BASIC_DATA_HEADER.template_id
   IS 'FLAGS=K-I-L^DATATYPE=STRING(30)/UPPERCASE^PROMPT=Template Id^';
COMMENT ON COLUMN MDM_BASIC_DATA_HEADER.revision
   IS 'FLAGS=K-I-L^DATATYPE=NUMBER^PROMPT=Revision^';
COMMENT ON COLUMN MDM_BASIC_DATA_HEADER.description
   IS 'FLAGS=AMIU-^DATATYPE=STRING(50)^PROMPT=Description^';
COMMENT ON COLUMN MDM_BASIC_DATA_HEADER.created_by
   IS 'FLAGS=AMI--^DATATYPE=STRING(10)^PROMPT=Created By^';
COMMENT ON COLUMN MDM_BASIC_DATA_HEADER.created_date
   IS 'FLAGS=AMI--^DATATYPE=DATE/DATE^PROMPT=Created Date^';
COMMENT ON COLUMN MDM_BASIC_DATA_HEADER.profile_id
   IS 'FLAGS=A-IUL^DATATYPE=STRING(10)^PROMPT=Approval Template Id^REF=ApprovalProfile^';
COMMENT ON COLUMN MDM_BASIC_DATA_HEADER.notes
   IS 'FLAGS=A-IU-^DATATYPE=LONG_TEXT^PROMPT=Notes^';
COMMENT ON COLUMN MDM_BASIC_DATA_HEADER.state
   IS 'FLAGS=A---L^DATATYPE=STRING(20)^PROMPT=State^';


-----------------------------------------------------------------------------
-------------------- API PACKAGE IMPLEMENTATION -----------------------------
-----------------------------------------------------------------------------

PROMPT Creating Mdm_Basic_Data_Header_API implementation

CREATE OR REPLACE PACKAGE BODY Mdm_Basic_Data_Header_API IS

-----------------------------------------------------------------------------
-------------------- PRIVATE DECLARATIONS -----------------------------------
-----------------------------------------------------------------------------

TYPE Indicator_Rec IS RECORD
  (template_id                    BOOLEAN := FALSE,
   revision                       BOOLEAN := FALSE,
   description                    BOOLEAN := FALSE,
   created_by                     BOOLEAN := FALSE,
   created_date                   BOOLEAN := FALSE,
   profile_id                     BOOLEAN := FALSE,
   notes                          BOOLEAN := FALSE);


-----------------------------------------------------------------------------
-------------------- IMPLEMENTATION METHOD DECLARATIONS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Raise_Too_Many_Rows___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   methodname_ IN VARCHAR2 );

PROCEDURE Raise_Record_Not_Exist___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER );

PROCEDURE Raise_Record_Exist___ (
   rec_ mdm_basic_data_header_tab%ROWTYPE );

PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 );

PROCEDURE Raise_Record_Modified___ (
   rec_ mdm_basic_data_header_tab%ROWTYPE );

PROCEDURE Raise_Record_Locked___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER );

PROCEDURE Raise_Record_Removed___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER );

FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN mdm_basic_data_header_tab%ROWTYPE;

FUNCTION Lock_By_Keys___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER) RETURN mdm_basic_data_header_tab%ROWTYPE;

FUNCTION Lock_By_Keys_Nowait___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER) RETURN mdm_basic_data_header_tab%ROWTYPE;

FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN mdm_basic_data_header_tab%ROWTYPE;

FUNCTION Get_Object_By_Keys___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN mdm_basic_data_header_tab%ROWTYPE;

FUNCTION Check_Exist___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN BOOLEAN;

PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER );

PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 );

FUNCTION Pack___ (
   rec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN VARCHAR2;

FUNCTION Pack___ (
   rec_ IN mdm_basic_data_header_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2;

FUNCTION Pack_Table___ (
   rec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN VARCHAR2;

PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec );

FUNCTION Get_Indicator_Rec___ (
   rec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN Indicator_Rec;

FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN mdm_basic_data_header_tab%ROWTYPE,
   newrec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN Indicator_Rec;

PROCEDURE Check_Common___ (
   oldrec_ IN     mdm_basic_data_header_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 );

PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE );

PROCEDURE New___ (
   newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE );

PROCEDURE Check_Update___ (
   oldrec_ IN     mdm_basic_data_header_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 );

PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     mdm_basic_data_header_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE );

PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

PROCEDURE Check_Delete___ (
   remrec_ IN mdm_basic_data_header_tab%ROWTYPE );

PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN mdm_basic_data_header_tab%ROWTYPE );

PROCEDURE Delete___ (
   remrec_ IN mdm_basic_data_header_tab%ROWTYPE );

PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE );

FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC;

FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC;

PROCEDURE Finite_State_Set___ (
   rec_   IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   state_ IN     VARCHAR2 );

PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT NOCOPY VARCHAR2 );

PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     mdm_basic_data_header_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

PROCEDURE Finite_State_Init___ (
   rec_  IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 );

-----------------------------------------------------------------------------
-------------------- BASE METHODS -------------------------------------------
-----------------------------------------------------------------------------

--@IgnoreMissingSysinit
FUNCTION Get_Key_By_Rowkey (
   rowkey_ IN VARCHAR2 ) RETURN mdm_basic_data_header_tab%ROWTYPE
IS
   
   FUNCTION Base (
      rowkey_ IN VARCHAR2 ) RETURN mdm_basic_data_header_tab%ROWTYPE
   IS
      rec_ mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      SELECT template_id, revision
         INTO  rec_.template_id, rec_.revision
         FROM  mdm_basic_data_header_tab
         WHERE rowkey = rowkey_;
      RETURN rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(rec_.template_id, rec_.revision, 'Get_Key_By_Rowkey');
   END Base;

BEGIN
   RETURN Base(rowkey_);
END Get_Key_By_Rowkey;


--@IgnoreMissingSysinit
PROCEDURE Exist (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER )
IS
   
   PROCEDURE Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER )
   IS
   BEGIN
      IF (NOT Check_Exist___(template_id_, revision_)) THEN
         Raise_Record_Not_Exist___(template_id_, revision_);
      END IF;
   END Base;

BEGIN
   Base(template_id_, revision_);
END Exist;


--@IgnoreMissingSysinit
FUNCTION Exists (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER ) RETURN BOOLEAN
   IS
   BEGIN
      RETURN Check_Exist___(template_id_, revision_);
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Exists;


--@IgnoreMissingSysinit
FUNCTION Get_Description (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ mdm_basic_data_header_tab.description%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT description
         INTO  temp_
         FROM  mdm_basic_data_header_tab
         WHERE template_id = template_id_
         AND   revision = revision_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, 'Get_Description');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Get_Description;


--@IgnoreMissingSysinit
FUNCTION Get_Created_By (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ mdm_basic_data_header_tab.created_by%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT created_by
         INTO  temp_
         FROM  mdm_basic_data_header_tab
         WHERE template_id = template_id_
         AND   revision = revision_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, 'Get_Created_By');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Get_Created_By;


--@IgnoreMissingSysinit
FUNCTION Get_Created_Date (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN DATE
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER ) RETURN DATE
   IS
      temp_ mdm_basic_data_header_tab.created_date%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT created_date
         INTO  temp_
         FROM  mdm_basic_data_header_tab
         WHERE template_id = template_id_
         AND   revision = revision_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, 'Get_Created_Date');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Get_Created_Date;


--@IgnoreMissingSysinit
FUNCTION Get_Profile_Id (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER ) RETURN VARCHAR2
   IS
      temp_ mdm_basic_data_header_tab.profile_id%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT profile_id
         INTO  temp_
         FROM  mdm_basic_data_header_tab
         WHERE template_id = template_id_
         AND   revision = revision_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, 'Get_Profile_Id');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Get_Profile_Id;


--@IgnoreMissingSysinit
FUNCTION Get_Notes (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN CLOB
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER ) RETURN CLOB
   IS
      temp_ mdm_basic_data_header_tab.notes%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT notes
         INTO  temp_
         FROM  mdm_basic_data_header_tab
         WHERE template_id = template_id_
         AND   revision = revision_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, 'Get_Notes');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Get_Notes;


--@IgnoreMissingSysinit
FUNCTION Get (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN Public_Rec
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER ) RETURN Public_Rec
   IS
      temp_ Public_Rec;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT template_id, revision,
             rowid, rowversion, rowkey, rowstate,
             description, 
             created_by, 
             created_date, 
             profile_id, 
             notes
         INTO  temp_
         FROM  mdm_basic_data_header_tab
         WHERE template_id = template_id_
         AND   revision = revision_;
      RETURN temp_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, 'Get');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Get;


--@IgnoreMissingSysinit
FUNCTION Get_Objkey (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER ) RETURN VARCHAR2
   IS
      rowkey_ mdm_basic_data_header_tab.rowkey%TYPE;
   BEGIN
      IF (template_id_ IS NULL OR revision_ IS NULL) THEN
         RETURN NULL;
      END IF;
      SELECT rowkey
         INTO  rowkey_
         FROM  mdm_basic_data_header_tab
         WHERE template_id = template_id_
         AND   revision = revision_;
      RETURN rowkey_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, 'Get_Objkey');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Get_Objkey;


PROCEDURE Write_Notes__ (
   objversion_ IN OUT NOCOPY VARCHAR2,
   rowid_      IN     ROWID,
   lob_loc_    IN     CLOB )
IS
   
   PROCEDURE Base (
      objversion_ IN OUT NOCOPY VARCHAR2,
      rowid_      IN     ROWID,
      lob_loc_    IN     CLOB )
   IS
      rec_ mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      rec_ := Lock_By_Id___(rowid_, objversion_);
      UPDATE mdm_basic_data_header_tab
      SET notes = lob_loc_,
          rowversion = sysdate
      WHERE rowid = rowid_
      RETURNING rowversion INTO rec_.rowversion;
      objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
   END Base;

BEGIN
   General_SYS.Init_Method(Mdm_Basic_Data_Header_API.lu_name_, 'Mdm_Basic_Data_Header_API', 'Write_Notes__');
   Base(objversion_, rowid_, lob_loc_);
END Write_Notes__;


--@IgnoreMissingSysinit
PROCEDURE Lock__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2 )
   IS
      dummy_ mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      dummy_ := Lock_By_Id___(objid_, objversion_);
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   Base(info_, objid_, objversion_);
END Lock__;


PROCEDURE New__ (
   info_       OUT    VARCHAR2,
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      newrec_   mdm_basic_data_header_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'PREPARE') THEN
         Prepare_Insert___(attr_);
      ELSIF (action_ = 'CHECK') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         Unpack___(newrec_, indrec_, attr_);
         Check_Insert___(newrec_, indrec_, attr_);
         Insert___(objid_, objversion_, newrec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Mdm_Basic_Data_Header_API.lu_name_, 'Mdm_Basic_Data_Header_API', 'New__');
   Base(info_, objid_, objversion_, attr_, action_);
END New__;


PROCEDURE Remove__ (
   info_       OUT VARCHAR2,
   objid_      IN  VARCHAR2,
   objversion_ IN  VARCHAR2,
   action_     IN  VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT VARCHAR2,
      objid_      IN  VARCHAR2,
      objversion_ IN  VARCHAR2,
      action_     IN  VARCHAR2 )
   IS
      remrec_ mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         remrec_ := Get_Object_By_Id___(objid_);
         Check_Delete___(remrec_);
      ELSIF (action_ = 'DO') THEN
         remrec_ := Lock_By_Id___(objid_, objversion_);
         Check_Delete___(remrec_);
         Delete___(objid_, remrec_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Mdm_Basic_Data_Header_API.lu_name_, 'Mdm_Basic_Data_Header_API', 'Remove__');
   Base(info_, objid_, objversion_, action_);
END Remove__;


PROCEDURE Raise_Too_Many_Rows___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER,
   methodname_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER,
      methodname_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Too_Many_Rows(Mdm_Basic_Data_Header_API.lu_name_, NULL, methodname_);
   END Base;

BEGIN
   Base(template_id_, revision_, methodname_);
END Raise_Too_Many_Rows___;


PROCEDURE Raise_Record_Not_Exist___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER )
IS
   
   PROCEDURE Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Not_Exist(Mdm_Basic_Data_Header_API.lu_name_);
   END Base;

BEGIN
   Base(template_id_, revision_);
END Raise_Record_Not_Exist___;


PROCEDURE Raise_Record_Exist___ (
   rec_ mdm_basic_data_header_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ mdm_basic_data_header_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Exist(Mdm_Basic_Data_Header_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Exist___;


PROCEDURE Raise_Item_Format___ (
   name_ IN VARCHAR2,
   value_ IN VARCHAR2 )
IS
   
   PROCEDURE Base (
      name_ IN VARCHAR2,
      value_ IN VARCHAR2 )
   IS
   BEGIN
      Error_SYS.Item_Format(Mdm_Basic_Data_Header_API.lu_name_, name_, value_);
   END Base;

BEGIN
   Base(name_, value_);
END Raise_Item_Format___;


PROCEDURE Raise_Record_Modified___ (
   rec_ mdm_basic_data_header_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      rec_ mdm_basic_data_header_tab%ROWTYPE )
   IS
   BEGIN
      Error_SYS.Record_Modified(Mdm_Basic_Data_Header_API.lu_name_);
   END Base;

BEGIN
   Base(rec_);
END Raise_Record_Modified___;


PROCEDURE Raise_Record_Locked___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER )
IS
   
   PROCEDURE Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Locked(Mdm_Basic_Data_Header_API.lu_name_);
   END Base;

BEGIN
   Base(template_id_, revision_);
END Raise_Record_Locked___;


PROCEDURE Raise_Record_Removed___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER )
IS
   
   PROCEDURE Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER )
   IS
   BEGIN
      Error_SYS.Record_Removed(Mdm_Basic_Data_Header_API.lu_name_);
   END Base;

BEGIN
   Base(template_id_, revision_);
END Raise_Record_Removed___;


FUNCTION Lock_By_Id___ (
   objid_      IN VARCHAR2,
   objversion_ IN VARCHAR2 ) RETURN mdm_basic_data_header_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_      IN VARCHAR2,
      objversion_ IN VARCHAR2 ) RETURN mdm_basic_data_header_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        mdm_basic_data_header_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      SELECT *
         INTO  rec_
         FROM  mdm_basic_data_header_tab
         WHERE rowid = objid_
         AND    to_char(rowversion,'YYYYMMDDHH24MISS') = objversion_
         FOR UPDATE NOWAIT;
      RETURN rec_;
   EXCEPTION
      WHEN row_locked THEN
         Error_SYS.Record_Locked(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, NULL, 'Lock_By_Id___');
      WHEN no_data_found THEN
         BEGIN
            SELECT 1
               INTO  dummy_
               FROM  mdm_basic_data_header_tab
               WHERE rowid = objid_;
            Raise_Record_Modified___(rec_);
         EXCEPTION
            WHEN no_data_found THEN
               Error_SYS.Record_Removed(lu_name_);
            WHEN too_many_rows THEN
               Raise_Too_Many_Rows___(NULL, NULL, 'Lock_By_Id___');
         END;
   END Base;

BEGIN
   RETURN Base(objid_, objversion_);
END Lock_By_Id___;


FUNCTION Lock_By_Keys___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER) RETURN mdm_basic_data_header_tab%ROWTYPE
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER) RETURN mdm_basic_data_header_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  mdm_basic_data_header_tab
            WHERE template_id = template_id_
            AND   revision = revision_
            FOR UPDATE;
         RETURN rec_;
      EXCEPTION
         WHEN no_data_found THEN
            Raise_Record_Removed___(template_id_, revision_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(template_id_, revision_, 'Lock_By_Keys___');
      END;
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Lock_By_Keys___;


FUNCTION Lock_By_Keys_Nowait___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER) RETURN mdm_basic_data_header_tab%ROWTYPE
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER) RETURN mdm_basic_data_header_tab%ROWTYPE
   IS
      row_locked  EXCEPTION;
      PRAGMA      EXCEPTION_INIT(row_locked, -0054);
      rec_        mdm_basic_data_header_tab%ROWTYPE;
      dummy_      NUMBER;
   BEGIN
      BEGIN
         SELECT *
            INTO  rec_
            FROM  mdm_basic_data_header_tab
            WHERE template_id = template_id_
            AND   revision = revision_
            FOR UPDATE NOWAIT;
         RETURN rec_;
      EXCEPTION
         WHEN row_locked THEN
            Error_SYS.Record_Locked(lu_name_);
         WHEN too_many_rows THEN
            Raise_Too_Many_Rows___(template_id_, revision_, 'Lock_By_Keys___');
         WHEN no_data_found THEN
            BEGIN
               SELECT 1
                  INTO  dummy_
                  FROM  mdm_basic_data_header_tab
                  WHERE template_id = template_id_
                  AND   revision = revision_;
               Raise_Record_Modified___(rec_);
            EXCEPTION
               WHEN no_data_found THEN
                  Raise_Record_Removed___(template_id_, revision_);
               WHEN too_many_rows THEN
                  Raise_Too_Many_Rows___(template_id_, revision_, 'Lock_By_Keys___');
            END;
      END;
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Lock_By_Keys_Nowait___;


FUNCTION Get_Object_By_Id___ (
   objid_ IN VARCHAR2 ) RETURN mdm_basic_data_header_tab%ROWTYPE
IS
   
   FUNCTION Base (
      objid_ IN VARCHAR2 ) RETURN mdm_basic_data_header_tab%ROWTYPE
   IS
      lu_rec_ mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  mdm_basic_data_header_tab
         WHERE rowid = objid_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         Error_SYS.Record_Removed(lu_name_);
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, NULL, 'Get_Object_By_Id___');
   END Base;

BEGIN
   RETURN Base(objid_);
END Get_Object_By_Id___;


--@IgnoreMissingSysinit
FUNCTION Get_Object_By_Keys___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN mdm_basic_data_header_tab%ROWTYPE
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER ) RETURN mdm_basic_data_header_tab%ROWTYPE
   IS
      lu_rec_ mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      SELECT *
         INTO  lu_rec_
         FROM  mdm_basic_data_header_tab
         WHERE template_id = template_id_
         AND   revision = revision_;
      RETURN lu_rec_;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN lu_rec_;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, 'Get_Object_By_Keys___');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Get_Object_By_Keys___;


--@IgnoreMissingSysinit
FUNCTION Check_Exist___ (
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER ) RETURN BOOLEAN
IS
   
   FUNCTION Base (
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER ) RETURN BOOLEAN
   IS
      dummy_ NUMBER;
   BEGIN
      SELECT 1
         INTO  dummy_
         FROM  mdm_basic_data_header_tab
         WHERE template_id = template_id_
         AND   revision = revision_;
      RETURN TRUE;
   EXCEPTION
      WHEN no_data_found THEN
         RETURN FALSE;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, 'Check_Exist___');
   END Base;

BEGIN
   RETURN Base(template_id_, revision_);
END Check_Exist___;


PROCEDURE Get_Version_By_Id___ (
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      SELECT to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objversion_
         FROM  mdm_basic_data_header_tab
         WHERE rowid = objid_;
   EXCEPTION
      WHEN no_data_found THEN
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(NULL, NULL, 'Get_Version_By_Id___');
   END Base;

BEGIN
   Base(objid_, objversion_);
END Get_Version_By_Id___;


PROCEDURE Get_Id_Version_By_Keys___ (
   objid_      IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   template_id_ IN VARCHAR2,
   revision_ IN NUMBER )
IS
   
   PROCEDURE Base (
      objid_      IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      template_id_ IN VARCHAR2,
      revision_ IN NUMBER )
   IS
   BEGIN
      SELECT rowid, to_char(rowversion,'YYYYMMDDHH24MISS')
         INTO  objid_, objversion_
         FROM  mdm_basic_data_header_tab
         WHERE template_id = template_id_
         AND   revision = revision_;
   EXCEPTION
      WHEN no_data_found THEN
         objid_      := NULL;
         objversion_ := NULL;
      WHEN too_many_rows THEN
         Raise_Too_Many_Rows___(template_id_, revision_, 'Get_Id_Version_By_Keys___');
   END Base;

BEGIN
   Base(objid_, objversion_, template_id_, revision_);
END Get_Id_Version_By_Keys___;


PROCEDURE Unpack___ (
   newrec_   IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   indrec_   IN OUT NOCOPY Indicator_Rec,
   attr_     IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_   IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      indrec_   IN OUT NOCOPY Indicator_Rec,
      attr_     IN OUT NOCOPY VARCHAR2 )
   IS
      ptr_   NUMBER;
      name_  VARCHAR2(30);
      value_ VARCHAR2(32000);
      msg_   VARCHAR2(32000);
   BEGIN
      Reset_Indicator_Rec___(indrec_);
      Client_SYS.Clear_Attr(msg_);
      ptr_ := NULL;
      WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
         CASE name_
         WHEN ('TEMPLATE_ID') THEN
            newrec_.template_id := value_;
            indrec_.template_id := TRUE;
         WHEN ('REVISION') THEN
            newrec_.revision := Client_SYS.Attr_Value_To_Number(value_);
            indrec_.revision := TRUE;
         WHEN ('DESCRIPTION') THEN
            newrec_.description := value_;
            indrec_.description := TRUE;
         WHEN ('CREATED_BY') THEN
            newrec_.created_by := value_;
            indrec_.created_by := TRUE;
         WHEN ('CREATED_DATE') THEN
            newrec_.created_date := Client_SYS.Attr_Value_To_Date(value_);
            indrec_.created_date := TRUE;
         WHEN ('PROFILE_ID') THEN
            newrec_.profile_id := value_;
            indrec_.profile_id := TRUE;
         ELSE
            Client_SYS.Add_To_Attr(name_, value_, msg_);
         END CASE;
      END LOOP;
      attr_ := msg_;
   EXCEPTION
      WHEN value_error THEN
         Raise_Item_Format___(name_, value_);
   END Base;

BEGIN
   Base(newrec_, indrec_, attr_);
END Unpack___;


FUNCTION Pack___ (
   rec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (rec_.template_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('TEMPLATE_ID', rec_.template_id, attr_);
      END IF;
      IF (rec_.revision IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('REVISION', rec_.revision, attr_);
      END IF;
      IF (rec_.description IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
      END IF;
      IF (rec_.created_by IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CREATED_BY', rec_.created_by, attr_);
      END IF;
      IF (rec_.created_date IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('CREATED_DATE', rec_.created_date, attr_);
      END IF;
      IF (rec_.profile_id IS NOT NULL) THEN
         Client_SYS.Add_To_Attr('PROFILE_ID', rec_.profile_id, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack___;


FUNCTION Pack___ (
   rec_ IN mdm_basic_data_header_tab%ROWTYPE,
   indrec_ IN Indicator_Rec ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN mdm_basic_data_header_tab%ROWTYPE,
      indrec_ IN Indicator_Rec ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      IF (indrec_.template_id) THEN
         Client_SYS.Add_To_Attr('TEMPLATE_ID', rec_.template_id, attr_);
      END IF;
      IF (indrec_.revision) THEN
         Client_SYS.Add_To_Attr('REVISION', rec_.revision, attr_);
      END IF;
      IF (indrec_.description) THEN
         Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
      END IF;
      IF (indrec_.created_by) THEN
         Client_SYS.Add_To_Attr('CREATED_BY', rec_.created_by, attr_);
      END IF;
      IF (indrec_.created_date) THEN
         Client_SYS.Add_To_Attr('CREATED_DATE', rec_.created_date, attr_);
      END IF;
      IF (indrec_.profile_id) THEN
         Client_SYS.Add_To_Attr('PROFILE_ID', rec_.profile_id, attr_);
      END IF;
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_, indrec_);
END Pack___;


FUNCTION Pack_Table___ (
   rec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      rec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN VARCHAR2
   IS
      attr_ VARCHAR2(32000);
   BEGIN
      Client_SYS.Clear_Attr(attr_);
      Client_SYS.Add_To_Attr('TEMPLATE_ID', rec_.template_id, attr_);
      Client_SYS.Add_To_Attr('REVISION', rec_.revision, attr_);
      Client_SYS.Add_To_Attr('DESCRIPTION', rec_.description, attr_);
      Client_SYS.Add_To_Attr('CREATED_BY', rec_.created_by, attr_);
      Client_SYS.Add_To_Attr('CREATED_DATE', rec_.created_date, attr_);
      Client_SYS.Add_To_Attr('PROFILE_ID', rec_.profile_id, attr_);
      Client_SYS.Add_To_Attr('ROWKEY', rec_.rowkey, attr_);
      Client_SYS.Add_To_Attr('ROWSTATE', rec_.rowstate, attr_);
      RETURN attr_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Pack_Table___;


PROCEDURE Reset_Indicator_Rec___ (
   indrec_ IN OUT NOCOPY Indicator_Rec )
IS
   
   PROCEDURE Base (
      indrec_ IN OUT NOCOPY Indicator_Rec )
   IS
      empty_indrec_ Indicator_Rec;
   BEGIN
      indrec_ := empty_indrec_;
   END Base;

BEGIN
   Base(indrec_);
END Reset_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   rec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      rec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.template_id := rec_.template_id IS NOT NULL;
      indrec_.revision := rec_.revision IS NOT NULL;
      indrec_.description := rec_.description IS NOT NULL;
      indrec_.created_by := rec_.created_by IS NOT NULL;
      indrec_.created_date := rec_.created_date IS NOT NULL;
      indrec_.profile_id := rec_.profile_id IS NOT NULL;
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(rec_);
END Get_Indicator_Rec___;


FUNCTION Get_Indicator_Rec___ (
   oldrec_ IN mdm_basic_data_header_tab%ROWTYPE,
   newrec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN Indicator_Rec
IS
   
   FUNCTION Base (
      oldrec_ IN mdm_basic_data_header_tab%ROWTYPE,
      newrec_ IN mdm_basic_data_header_tab%ROWTYPE ) RETURN Indicator_Rec
   IS
      indrec_ Indicator_Rec;
   BEGIN
      indrec_.template_id := Validate_SYS.Is_Changed(oldrec_.template_id, newrec_.template_id);
      indrec_.revision := Validate_SYS.Is_Changed(oldrec_.revision, newrec_.revision);
      indrec_.description := Validate_SYS.Is_Changed(oldrec_.description, newrec_.description);
      indrec_.created_by := Validate_SYS.Is_Changed(oldrec_.created_by, newrec_.created_by);
      indrec_.created_date := Validate_SYS.Is_Changed(oldrec_.created_date, newrec_.created_date);
      indrec_.profile_id := Validate_SYS.Is_Changed(oldrec_.profile_id, newrec_.profile_id);
      RETURN indrec_;
   END Base;

BEGIN
   RETURN Base(oldrec_, newrec_);
END Get_Indicator_Rec___;


PROCEDURE Check_Common___ (
   oldrec_ IN     mdm_basic_data_header_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     mdm_basic_data_header_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      IF (newrec_.profile_id IS NOT NULL)
      AND (indrec_.profile_id)
      AND (Validate_SYS.Is_Changed(oldrec_.profile_id, newrec_.profile_id)) THEN
         Approval_Profile_API.Exist(newrec_.profile_id);
      END IF;
      Error_SYS.Check_Not_Null(lu_name_, 'DESCRIPTION', newrec_.description);
      Error_SYS.Check_Not_Null(lu_name_, 'CREATED_BY', newrec_.created_by);
      Error_SYS.Check_Not_Null(lu_name_, 'CREATED_DATE', newrec_.created_date);
   END Base;

BEGIN
   Base(oldrec_, newrec_, indrec_, attr_);
END Check_Common___;


PROCEDURE Check_Insert___ (
   newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
      oldrec_ mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(newrec_, indrec_, attr_);
END Check_Insert___;


PROCEDURE Insert___ (
   objid_      OUT    VARCHAR2,
   objversion_ OUT    VARCHAR2,
   newrec_     IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      objid_      OUT    VARCHAR2,
      objversion_ OUT    VARCHAR2,
      newrec_     IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      newrec_.rowkey := sys_guid();
      Client_SYS.Add_To_Attr('OBJKEY', newrec_.rowkey, attr_);
      newrec_.rowstate := '<UNDEFINED>';
      INSERT
         INTO mdm_basic_data_header_tab
         VALUES newrec_
         RETURNING rowid INTO objid_;
      newrec_.rowstate := NULL;
      Finite_State_Init___(newrec_, attr_);
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'MDM_BASIC_DATA_HEADER_RK') THEN
               Error_SYS.Rowkey_Exist(lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

BEGIN
   Base(objid_, objversion_, newrec_, attr_);
END Insert___;


PROCEDURE Prepare_New___ (
   newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE )
   IS
      attr_    VARCHAR2(32000);
      indrec_  Indicator_Rec;
   BEGIN
      Prepare_Insert___(attr_);
      Unpack___(newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END Prepare_New___;


PROCEDURE New___ (
   newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE )
   IS
      objid_         VARCHAR2(20);
      objversion_    VARCHAR2(100);
      attr_          VARCHAR2(32000);
      indrec_        Indicator_Rec;
      emptyrec_      mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      indrec_ := Get_Indicator_Rec___(emptyrec_, newrec_);
      Check_Insert___(newrec_, indrec_, attr_);
      Insert___(objid_, objversion_, newrec_, attr_);
   END Base;

BEGIN
   Base(newrec_);
END New___;


PROCEDURE Check_Update___ (
   oldrec_ IN     mdm_basic_data_header_tab%ROWTYPE,
   newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   indrec_ IN OUT NOCOPY Indicator_Rec,
   attr_   IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      oldrec_ IN     mdm_basic_data_header_tab%ROWTYPE,
      newrec_ IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      indrec_ IN OUT NOCOPY Indicator_Rec,
      attr_   IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Validate_SYS.Item_Update(lu_name_, 'TEMPLATE_ID', indrec_.template_id);
      Validate_SYS.Item_Update(lu_name_, 'REVISION', indrec_.revision);
      Validate_SYS.Item_Update(lu_name_, 'CREATED_BY', indrec_.created_by);
      Validate_SYS.Item_Update(lu_name_, 'CREATED_DATE', indrec_.created_date);
      Check_Common___(oldrec_, newrec_, indrec_, attr_);
   END Base;

BEGIN
   Base(oldrec_, newrec_, indrec_, attr_);
END Check_Update___;


PROCEDURE Update___ (
   objid_      IN     VARCHAR2,
   oldrec_     IN     mdm_basic_data_header_tab%ROWTYPE,
   newrec_     IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   attr_       IN OUT NOCOPY VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   by_keys_    IN     BOOLEAN DEFAULT FALSE )
IS
   
   PROCEDURE Base (
      objid_      IN     VARCHAR2,
      oldrec_     IN     mdm_basic_data_header_tab%ROWTYPE,
      newrec_     IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      attr_       IN OUT NOCOPY VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      by_keys_    IN     BOOLEAN DEFAULT FALSE )
   IS
   BEGIN
      newrec_.rowversion := sysdate;
      IF by_keys_ THEN
         UPDATE mdm_basic_data_header_tab
            SET ROW = newrec_
            WHERE template_id = newrec_.template_id
            AND   revision = newrec_.revision;
      ELSE
         UPDATE mdm_basic_data_header_tab
            SET ROW = newrec_
            WHERE rowid = objid_;
      END IF;
      objversion_ := to_char(newrec_.rowversion,'YYYYMMDDHH24MISS');
   EXCEPTION
      WHEN dup_val_on_index THEN
         DECLARE
            constraint_ VARCHAR2(4000) := Utility_SYS.Between_Str(Utility_SYS.Between_Str(sqlerrm, '(', ')'), '.', ')', 'FALSE');
         BEGIN
            IF (constraint_ = 'MDM_BASIC_DATA_HEADER_RK') THEN
               Error_SYS.Rowkey_Exist(Mdm_Basic_Data_Header_API.lu_name_, newrec_.rowkey);
            ELSE
               Raise_Record_Exist___(newrec_);
            END IF;
         END;
   END Base;

BEGIN
   Base(objid_, oldrec_, newrec_, attr_, objversion_, by_keys_);
END Update___;


PROCEDURE Modify___ (
   newrec_         IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      newrec_         IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      objid_      VARCHAR2(20);
      objversion_ VARCHAR2(100);
      attr_       VARCHAR2(32000);
      indrec_     Indicator_rec;
      oldrec_     mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(newrec_.template_id, newrec_.revision);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(newrec_.template_id, newrec_.revision);
      END IF;
      indrec_ := Get_Indicator_Rec___(oldrec_, newrec_);
      Check_Update___(oldrec_, newrec_, indrec_, attr_);
      Update___(objid_, oldrec_, newrec_, attr_, objversion_, TRUE);
   END Base;

BEGIN
   Base(newrec_, lock_mode_wait_);
END Modify___;


PROCEDURE Check_Delete___ (
   remrec_ IN mdm_basic_data_header_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN mdm_basic_data_header_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.template_id||'^'||remrec_.revision||'^';
      Reference_SYS.Check_Restricted_Delete(lu_name_, key_);
   END Base;

BEGIN
   Base(remrec_);
END Check_Delete___;


PROCEDURE Delete___ (
   objid_  IN VARCHAR2,
   remrec_ IN mdm_basic_data_header_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      objid_  IN VARCHAR2,
      remrec_ IN mdm_basic_data_header_tab%ROWTYPE )
   IS
      key_ VARCHAR2(2000);
   BEGIN
      key_ := remrec_.template_id||'^'||remrec_.revision||'^';
      Reference_SYS.Do_Cascade_Delete(lu_name_, key_);
      IF (objid_ IS NOT NULL) THEN
         DELETE
            FROM  mdm_basic_data_header_tab
            WHERE rowid = objid_;
      ELSE
         DELETE
            FROM  mdm_basic_data_header_tab
            WHERE template_id = remrec_.template_id
            AND   revision = remrec_.revision;
      END IF;
   END Base;

BEGIN
   Base(objid_, remrec_);
END Delete___;


PROCEDURE Delete___ (
   remrec_ IN mdm_basic_data_header_tab%ROWTYPE )
IS
   
   PROCEDURE Base (
      remrec_ IN mdm_basic_data_header_tab%ROWTYPE )
   IS
   BEGIN
      Delete___(NULL, remrec_);
   END Base;

BEGIN
   Base(remrec_);
END Delete___;


PROCEDURE Remove___ (
   remrec_         IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
IS
   
   PROCEDURE Base (
      remrec_         IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      lock_mode_wait_ IN     BOOLEAN DEFAULT TRUE )
   IS
      oldrec_     mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      IF (lock_mode_wait_) THEN
         oldrec_ := Lock_By_Keys___(remrec_.template_id, remrec_.revision);
      ELSE
         oldrec_ := Lock_By_Keys_Nowait___(remrec_.template_id, remrec_.revision);
      END IF;
      Check_Delete___(oldrec_);
      Delete___(NULL, oldrec_);
   END Base;

BEGIN
   Base(remrec_, lock_mode_wait_);
END Remove___;

-----------------------------------------------------------------------------
-------------------- FINITE STATE MACHINE -----------------------------------
-----------------------------------------------------------------------------

PROCEDURE Finite_State_Init_ (
   rec_  IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_  IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Finite_State_Init___(rec_, attr_);
   END Base;

BEGIN
   General_SYS.Init_Method(Mdm_Basic_Data_Header_API.lu_name_, 'Mdm_Basic_Data_Header_API', 'Finite_State_Init_', server_only_ => TRUE);
   Base(rec_, attr_);
END Finite_State_Init_;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Decode__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      db_state_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN(Domain_SYS.Decode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, db_state_));
   END Base;

BEGIN
   RETURN Base(db_state_);
END Finite_State_Decode__;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Encode__ (
   client_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      client_state_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      RETURN(Domain_SYS.Encode_(Domain_SYS.Get_Translated_Values(lu_name_), Get_Db_Values___, client_state_));
   END Base;

BEGIN
   RETURN Base(client_state_);
END Finite_State_Encode__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_States__ (
   client_values_ OUT VARCHAR2 )
IS
   
   PROCEDURE Base (
      client_values_ OUT VARCHAR2 )
   IS
   BEGIN
      client_values_ := Domain_SYS.Enumerate_(Domain_SYS.Get_Translated_Values(lu_name_));
   END Base;

BEGIN
   Base(client_values_);
END Enumerate_States__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_States_Db__ (
   db_values_ OUT VARCHAR2 )
IS
   
   PROCEDURE Base (
      db_values_ OUT VARCHAR2 )
   IS
   BEGIN
      db_values_ := Domain_SYS.Enumerate_(Get_Db_Values___);
   END Base;

BEGIN
   Base(db_values_);
END Enumerate_States_Db__;


--@IgnoreMissingSysinit
FUNCTION Finite_State_Events__ (
   db_state_ IN VARCHAR2 ) RETURN VARCHAR2
IS
   
   FUNCTION Base (
      db_state_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
   BEGIN
      IF (db_state_ IS NULL) THEN
         RETURN NULL;
      ELSIF (db_state_ = 'Active') THEN
         RETURN 'Obsolete^Reopen^';
      ELSIF (db_state_ = 'New') THEN
         RETURN 'Action^Obsolete^';
      ELSIF (db_state_ = 'Obsolete') THEN
         RETURN NULL;
      ELSE
         RETURN NULL;
      END IF;
   END Base;

BEGIN
   RETURN Base(db_state_);
END Finite_State_Events__;


--@IgnoreMissingSysinit
PROCEDURE Enumerate_Events__ (
   db_events_ OUT VARCHAR2 )
IS
   
   PROCEDURE Base (
      db_events_ OUT VARCHAR2 )
   IS
   BEGIN
      db_events_ := 'Action^Obsolete^Reopen^';
   END Base;

BEGIN
   Base(db_events_);
END Enumerate_Events__;


PROCEDURE Action__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_ mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         NULL;
      ELSIF (action_ = 'DO') THEN
         rec_ := Lock_By_Id___(objid_, objversion_);
         Finite_State_Machine___(rec_, 'Action', attr_);
         objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
         Finite_State_Add_To_Attr___(rec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Mdm_Basic_Data_Header_API.lu_name_, 'Mdm_Basic_Data_Header_API', 'Action__');
   Base(info_, objid_, objversion_, attr_, action_);
END Action__;


PROCEDURE Obsolete__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_ mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         NULL;
      ELSIF (action_ = 'DO') THEN
         rec_ := Lock_By_Id___(objid_, objversion_);
         Finite_State_Machine___(rec_, 'Obsolete', attr_);
         objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
         Finite_State_Add_To_Attr___(rec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Mdm_Basic_Data_Header_API.lu_name_, 'Mdm_Basic_Data_Header_API', 'Obsolete__');
   Base(info_, objid_, objversion_, attr_, action_);
END Obsolete__;


PROCEDURE Reopen__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      rec_ mdm_basic_data_header_tab%ROWTYPE;
   BEGIN
      IF (action_ = 'CHECK') THEN
         NULL;
      ELSIF (action_ = 'DO') THEN
         rec_ := Lock_By_Id___(objid_, objversion_);
         Finite_State_Machine___(rec_, 'Reopen', attr_);
         objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
         Finite_State_Add_To_Attr___(rec_, attr_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

BEGIN
   General_SYS.Init_Method(Mdm_Basic_Data_Header_API.lu_name_, 'Mdm_Basic_Data_Header_API', 'Reopen__');
   Base(info_, objid_, objversion_, attr_, action_);
END Reopen__;


FUNCTION Get_Db_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
   
   FUNCTION Base RETURN VARCHAR2 DETERMINISTIC
   IS
   BEGIN
      RETURN('New^Active^Obsolete^');
   END Base;

BEGIN
   RETURN Base;
END Get_Db_Values___;


FUNCTION Get_Client_Values___ RETURN VARCHAR2 DETERMINISTIC
IS
   
   FUNCTION Base RETURN VARCHAR2 DETERMINISTIC
   IS
   BEGIN
      RETURN('New^Active^Obsolete^');
   END Base;

BEGIN
   RETURN Base;
END Get_Client_Values___;


PROCEDURE Finite_State_Set___ (
   rec_   IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   state_ IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_   IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      state_ IN     VARCHAR2 )
   IS
   BEGIN
      rec_.rowversion := sysdate;
      UPDATE mdm_basic_data_header_tab
         SET rowstate = state_,
             rowversion = rec_.rowversion
         WHERE template_id = rec_.template_id
         AND   revision = rec_.revision;
      rec_.rowstate := state_;
   END Base;

BEGIN
   Base(rec_, state_);
END Finite_State_Set___;


PROCEDURE Finite_State_Machine___ (
   rec_   IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   event_ IN     VARCHAR2,
   attr_  IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_   IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      event_ IN     VARCHAR2,
      attr_  IN OUT NOCOPY VARCHAR2 )
   IS
      state_ mdm_basic_data_header_tab.rowstate%TYPE;
   BEGIN
      state_ := rec_.rowstate;
      IF (state_ IS NULL) THEN
         IF (event_ IS NULL) THEN
            Finite_State_Set___(rec_, 'New');
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'Active') THEN
         IF (event_ = 'Obsolete') THEN
            Finite_State_Set___(rec_, 'Obsolete');
         ELSIF (event_ = 'Reopen') THEN
            Finite_State_Set___(rec_, 'New');
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'New') THEN
         IF (event_ = 'Action') THEN
            Finite_State_Set___(rec_, 'Active');
         ELSIF (event_ = 'Obsolete') THEN
            Finite_State_Set___(rec_, 'Obsolete');
         ELSE
            Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
         END IF;
      ELSIF (state_ = 'Obsolete') THEN
         Error_SYS.State_Event_Not_Handled(lu_name_, event_, Finite_State_Decode__(state_));
      ELSE
         Error_SYS.State_Not_Exist(lu_name_, Finite_State_Decode__(state_));
      END IF;
   END Base;

BEGIN
   Base(rec_, event_, attr_);
END Finite_State_Machine___;


PROCEDURE Finite_State_Add_To_Attr___ (
   rec_  IN     mdm_basic_data_header_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_  IN     mdm_basic_data_header_tab%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
      state_ mdm_basic_data_header_tab.rowstate%TYPE;
   BEGIN
      state_ := rec_.rowstate;
      Client_SYS.Add_To_Attr('__OBJSTATE', state_, attr_);
      Client_SYS.Add_To_Attr('__OBJEVENTS', Finite_State_Events__(state_), attr_);
      Client_SYS.Add_To_Attr('STATE', Finite_State_Decode__(state_), attr_);
   END Base;

BEGIN
   Base(rec_, attr_);
END Finite_State_Add_To_Attr___;


PROCEDURE Finite_State_Init___ (
   rec_  IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      rec_  IN OUT NOCOPY mdm_basic_data_header_tab%ROWTYPE,
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Finite_State_Machine___(rec_, NULL, attr_);
      Finite_State_Add_To_Attr___(rec_, attr_);
   END Base;

BEGIN
   Base(rec_, attr_);
END Finite_State_Init___;

-----------------------------------------------------------------------------
-------------------- LU SPECIFIC IMPLEMENTATION METHODS ---------------------
-----------------------------------------------------------------------------

PROCEDURE Modify__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Base (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      oldrec_   mdm_basic_data_header_tab%ROWTYPE;
      newrec_   mdm_basic_data_header_tab%ROWTYPE;
      indrec_   Indicator_Rec;
   BEGIN
      IF (action_ = 'CHECK') THEN
         oldrec_ := Get_Object_By_Id___(objid_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
      ELSIF (action_ = 'DO') THEN
         oldrec_ := Lock_By_Id___(objid_, objversion_);
         newrec_ := oldrec_;
         Unpack___(newrec_, indrec_, attr_);
         Check_Update___(oldrec_, newrec_, indrec_, attr_);
         Update___(objid_, oldrec_, newrec_, attr_, objversion_);
      END IF;
      info_ := Client_SYS.Get_All_Info;
   END Base;

   PROCEDURE Cust (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
       status__     VARCHAR2(25);
      CURSOR c1 IS
      select STATE from MDM_BASIC_DATA_HEADER v
    where v.objid = objid_
    and v.objversion = objversion_;
   BEGIN
      OPEN c1 ;
       FETCH c1 INTO status__ ;
       CLOSE c1;
       IF status__ = 'Active' THEN
      Error_SYS.Record_General(lu_name_,'   :  You can''t Update any Data. Because of Status is '||status__);
       ELSE       
      --Add pre-processing code here
      Base(info_, objid_, objversion_, attr_, action_);
      --Add post-processing code here
       END IF;
    END Cust;

BEGIN
   General_SYS.Init_Method(Mdm_Basic_Data_Header_API.lu_name_, 'Mdm_Basic_Data_Header_API', 'Modify__');
   Cust(info_, objid_, objversion_, attr_, action_);
END Modify__;


PROCEDURE C_Approval_Process__ (lu_name_ IN VARCHAR2,
                              attr_   IN VARCHAR2)
IS
   
   PROCEDURE Cust (lu_name_ IN VARCHAR2,
                                 attr_   IN VARCHAR2)
   IS
   
            ptr_          NUMBER;
            name_         VARCHAR2(30);
            value_        VARCHAR2(32000);
            template_id_  varchar2(200);
            revision_     varchar2(200);
            profile_id_   VARCHAR2(200);
            mesg_         VARCHAR2(32000);
            new_access_person_  VARCHAR2(2000);
            new_access_group_   VARCHAR2(2000);
      BEGIN
        ptr_ := null;
      WHILE (Client_SYS.Get_Next_From_Attr(attr_, ptr_, name_, value_)) LOOP
               CASE name_
               WHEN ('TEMPLATE_ID') THEN
                  template_id_ := value_;
               WHEN ('REVISION') THEN
                  revision_ := Client_SYS.Attr_Value_To_Number(value_);         
               WHEN ('PROFILE_ID') THEN
                  profile_id_ := value_;
               ELSE
                  Client_SYS.Add_To_Attr(name_, value_, mesg_);
               END CASE;
            END LOOP;  
                  
        APPROVAL_ROUTING_API.COPY_APP_PROFILE (new_access_person_,
                                                      new_access_group_ ,
                                                      lu_name_          ,
                                                      'TEMPLATE_ID='||template_id_||'^REVISION='||revision_||'^',
                                                      profile_id_ );
        trace_sys.Message('new_access_person_' || new_access_person_);
        trace_sys.Message('new_access_group_' || new_access_group_);
        trace_sys.Message('lu_name_' || lu_name_);
        trace_sys.Message('profile_id_' || profile_id_);
      
   END Cust;

BEGIN
   General_SYS.Init_Method(Mdm_Basic_Data_Header_API.lu_name_, 'Mdm_Basic_Data_Header_API', 'C_Approval_Process__');
   Cust(lu_name_, attr_);
END C_Approval_Process__;


PROCEDURE C_Active__ (
   info_       OUT    VARCHAR2,
   objid_      IN     VARCHAR2,
   objversion_ IN OUT NOCOPY VARCHAR2,
   attr_       IN OUT NOCOPY VARCHAR2,
   action_     IN     VARCHAR2 )
IS
   
   PROCEDURE Cust (
      info_       OUT    VARCHAR2,
      objid_      IN     VARCHAR2,
      objversion_ IN OUT NOCOPY VARCHAR2,
      attr_       IN OUT NOCOPY VARCHAR2,
      action_     IN     VARCHAR2 )
   IS
      
      PROCEDURE Base (
         info_       OUT    VARCHAR2,
         objid_      IN     VARCHAR2,
         objversion_ IN OUT NOCOPY VARCHAR2,
         attr_       IN OUT NOCOPY VARCHAR2,
         action_     IN     VARCHAR2 )
      IS
         rec_ mdm_basic_data_header_tab%ROWTYPE;
      BEGIN
         IF (action_ = 'CHECK') THEN
            NULL;
         ELSIF (action_ = 'DO') THEN
            rec_ := Lock_By_Id___(objid_, objversion_);
            Finite_State_Machine___(rec_, 'Active', attr_);
            objversion_ := to_char(rec_.rowversion,'YYYYMMDDHH24MISS');
            Finite_State_Add_To_Attr___(rec_, attr_);
         END IF;
         info_ := Client_SYS.Get_All_Info;
      END Base;
   
   BEGIN
       Base(info_, objid_, objversion_, attr_, action_);
   END Cust;

BEGIN
   General_SYS.Init_Method(Mdm_Basic_Data_Header_API.lu_name_, 'Mdm_Basic_Data_Header_API', 'C_Active__');
   Cust(info_, objid_, objversion_, attr_, action_);
END C_Active__;


PROCEDURE Prepare_Insert___ (
   attr_ IN OUT NOCOPY VARCHAR2 )
IS
   
   PROCEDURE Base (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN
      Client_SYS.Clear_Attr(attr_);
   END Base;

   PROCEDURE Cust (
      attr_ IN OUT NOCOPY VARCHAR2 )
   IS
   BEGIN  
      Base(attr_);
      Client_SYS.Add_To_Attr('REVISION', 1, attr_);
      Client_SYS.Add_To_Attr('STATUS', 'New', attr_);
      Client_SYS.Add_To_Attr('CREATED_BY', fnd_session_api.Get_Fnd_User, attr_);
      Client_SYS.Add_To_Attr('CREATED_DATE', SYSDATE, attr_);   
   END Cust;

BEGIN
   Cust(attr_);
END Prepare_Insert___;

-----------------------------------------------------------------------------
-------------------- FOUNDATION1 METHODS ------------------------------------
-----------------------------------------------------------------------------


--@IgnoreMissingSysinit
PROCEDURE Language_Refreshed
IS
   
   PROCEDURE Base
   IS
   BEGIN
      Domain_SYS.Language_Refreshed(lu_name_, Get_Client_Values___, Get_Db_Values___, 'STATE');
   END Base;

BEGIN
   Base;
END Language_Refreshed;


--@IgnoreMissingSysinit
PROCEDURE Init
IS
   
   PROCEDURE Base
   IS
   BEGIN
      Domain_SYS.Load_State(lu_name_, Get_Client_Values___, Get_Db_Values___);
   END Base;

BEGIN
   Base;
END Init;

BEGIN
   Init;
END Mdm_Basic_Data_Header_API;
/
SHOW ERROR
