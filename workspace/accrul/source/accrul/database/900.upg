------------------------------------------------------------------------------------------
--
--  Filename      : 900.upg
--
--  Module        : ACCRUL
--
--  Purpose       : File for upgrade from Accounting Rules version 8.11.0 to 9.0.0
--
--  Date    Sign    History
--  ------  ----    ----------------------------------------------------------------------
--  090930  Krpelk  Created.
--  091210  Pwewlk  Issue ID EAFH- 774 , Added sections - Removing obsolete packages, 
--             Removing obsolete views
--  100110  Nsillk  EAFH-1510 Added columns cal_year and cal_month to Accounting Period Tab
--  100125  Ajpelk  EAFH-1615 SP5 code merge
--  100219  Maaylk  EAFH-2176, Convert data insertion statement of Tax_Code_Per_Tax_Book_Tab to pure sql statement
--  100224  Nalslk  RAVEN-39, Increased pseudo_code length to 20 characters
--  100225  Paralk  EAFH-2279, Added Missing Time Stamps.
--  100225  Maaylk  EAFH-2309, Added missing Show_info flags
--  100317  Samwlk  EAFH-2552, Rename Obsolete table posting_ctrl_def_tab.
--  100409  Nsillk  EAFH-2684, Added user_def_cal to Company_Finance_Tab
--  100422  Makrlk  TWIN PEAKS Merge.
--  100521  Nsillk  EAFH-3030, Added new values for correction_type in Company_Finance_Tab
--  100524  Jobase  EAFH-2644, Removed PostingPropInvUtil and IdentityPayInfo from finance_doc_reg_tab.
--  100524  Kagalk  EAFH-2938 Removed MASTER_OR_SLAVE, ACCRUL_ID from Accrul_Attribute_Tab
--  100527  Jobase  EAFH-2935, Remove obsolete data and package connected to Distributed Installation.
--  100624  RUFELK  EAFH-3248, Corrected some UPGRADE Errors.
--  100901  Umdolk  EAPM-1702, SP6 Merge.
--  100909  Umdolk  EAPM-1049, Modify the length in CUSTOMER_NO column in Accounting_Code_Part_Value_Tab.
--  100920  Umdolk  EAPM-4517, Fixed build errors.
--  100928  Machlk  RAVEN-944, Added institute_id to payment_term_details_tab
--  101021  Umdolk  EAPM-7899, Correction related to Bug 91102.  
--  100929  Machlk  RAVEN-944, Added suppress_amount to payment_term_tab
--  101013  Elarse  RAVEN-1004, Removed code added by RAVEN-829.
--  101102  jofise  DF-435, Added code to create Tax_Class_Tab.
--  101108  Elarse  DF-439, Added Tax_Codes_Per_Tax_Class_Tab.
--  101116  Elarse  DF-515, Modified columns in Tax_Codes_Per_Tax_Class_Tab.
--  101117  Elarse  DF-515, Removed FEE_CODE from PK in Tax_Codes_Per_Tax_Class_Tab.
--  101201  NEKOLK  Merged 100721_91957_ACCRUL.cdb (Added PROJECT_REOPENED column to  ACCOUNTING_CODE_PART_VALUE_TAB.)
--                  Merged 100914_92858_ACCRUL.cdb: (Corrected the error occured in 100914_92858_ACCRUL.cdb and
--                  Insert past data that are missing in ACCOUNTING_CODESTR_COMPL_TAB )
--                  Merged 101011_92374_ACCRUL.cdb(Create two new columns in ext_parameters_tab and ext_transactions_tab )
--  101231  Cprilk  HIGHPK-5478, Altered CURRENCY_TYPE_TAB and currency_type_def_tab.
--  110223  Lalise  Removed storage clause/parameter
--  110221  UMDOLK  EANE-4369, Modified, Added rowkey to all tables.
--  110309  AsHelk  EANE-1877, Updating past data for project_id and object_id columns in voucher_row_tab.
--  110530  THPELK  EASTONE-19663: Merged LCS Bug (94149).
--  110712  Sacalk  FIDEAGLE-296 , Merged Lcs Bug 94633, Corrected.
--  110719  Sacalk  Merged Bug 96469, update the open_bal_consolidated column of Accounting_Year_tab
--  110726  Mohrlk  FIDEAGLE-847, Corrected inconsistencies - index columns/indexes
--  110727  Sacalk  FIDEAGLE-198, Fixed errors in Dictionary Test
--  110729  Sacalk  FIDEAGLE-423, Merged bug 95261
--  110815  Umdolk  FIDEAGLE-1335, Merged bug 97737.
--  110907  AsHelk  EASTTWO-11671, Introduced PayledConnection.cre file to Connection Packages Start section  
--  110907          to Fix installation errors that happen due to Parallel deployment. 
--  111004  AJPELK  EASTTWO-15655, Bug 98827 merged. 
--  111020  ovjose  SFI195 Changes to Posting Ctrl detail level tables
--  111024  DeKoLK  Created Cost_Ele_To_Accnt_Secmap_Tab.
--  111230  Swralk  SFI-1328, Updated accounting_code_part_value_tab.
--  120109  Umdolk  SFI-1433, Removed activity_capitalization from accounting_code_part_value_tab.
--  111208  Maaylk  SFI-106, Merged LCS Bug 98828. Also moved all the Posting Ctrl related updates into a new section
--  120131  PKURLK  SFI-1857, Reomve default value in column EXCLUDE_CREDIT_LIMIT in PAYMENT_TERM_TAB.
--	 120131  PKURLK  SFI-1857, Set default value 'NULL' in column CTRL_TYPE_CATEGORY in POSTING_CTRL_CONTROL_TYPE_TAB and POSTING_CTRL_TAB.
--  120219  Sacalk  SFI-1326, Connection cre files removed.
--  120227  SJayLK  SBI-1206, Add uniques indices to RPD_PERIOD_DETAIL_TAB, RPD_COMPANY_PERIOD_DET_TAB
--  120228  Sacalk  SFI-324, Added Default_No_Base column to PROJECT_COST_ELEMENT_TAB
--  120301  Mawelk  SFI-2504 merged. Created index ACCOUNT_CODE_PART_VALUE_IX1 in ACCOUNTING_CODE_PART_VALUE_TAB.
--  120321  AsHelk  EASTRTM-6294, Upgrade Script Standardization.
--  150216  DipeLk  PRFI-5533,DEFAULT Value issue in Oracle 12C
--  160308  Savmlk, Bug 127836, Modified Inserting new posting_type logic.
------------------------------------------------------------------------------------------
SET SERVEROUTPUT ON
DEFINE MODULE = 'ACCRUL'
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------

-- Instructions for upg files:

-- If possible, everything regarding one table should be placed in one section.
-- If this is not possible, a proper comment about the reason should be added.

-- Each section should be started with a "-" line and a empty line.
-- The section should then start with a line like: "-- ***** Example_Tab Start *****"
-- and end with a line like:                       "-- ***** Example_Tab End *****"
-- The "start tag" (in this case "Example_Tab"), should be placed in "List of upgrade sections".
-- Don't forget UPPER/lower case !

-- Every part inside the section should start with a "PROMPT" line.

-- If the Pl block has DML instructions (INSERT,UPDATE,DELETE etc) there should always be a "COMMIT;" line after the block.
-- If the Pl block not has DML instructions, there should not be a "COMMIT;" line after the block.

-- Remember ordinary coding standard rules !

-- Don't drop any column in an upgrade file !

-- Don't forget performance when updating large tabled !

-- No unnecessary blank lines or comments !

-- If possible, use pure SQL update
-- If possible, try to put several updates together in one statement.

------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------

-- Upgrade sections: Accounting_Attribute_Tab
--                   Voucher_Tab
--                   Period_Allocation_Rule_Tab
--                   Period_Alloc_Rule_Line_Tab
--                   Period_Allocation_Tab
--                   Voucher_Row_Tab
--                   Voucher_Tab and Voucher_Row_Tab
--                   Voucher_Type_Tab and Voucher_Type_Detail_Tab
--                   Accounting_Period_Tab
--                   Tax_Code_Per_Tax_Book_Tab
--                   Project_Cost_Element_Tab
--                   Disabling B component from Master
--                   Posting_Ctrl_Allowed_Comb_Tab
--                   Ext_File_Xml_Layout_Tab
--                   Ext_File_Trans_Tab
--                   Ext_File_Template_Dir_Tab
--                   Accounting_Codestr_Comb_Tab
--                   Comb_Rule_Id_Tab 
--                   Voucher_Note_Tab
--                   Ext_File_Load_Tab
--                   Accrul_Attribute_Tab
--                   Ext_Transactions_Tab
--                   ext_parameters_tab
--                   Posting_Ctrl_Tab
--                   Company_Finance_Tab
--                   User_Group_Member_Finance_Tab
--                   Ext_Voucher_Row_Tab
--                   Transferred_voucher_row_tab
--                   Accounting_code_part_value_tmp
--                   Statutory_fee_tab
--                   Gen_led_voucher_tab
--                   Pseudo_Codes_Tab
--                   Finance_Doc_Reg_Tab
--                   In_Message_Tab
--                   Out_Message_Tab
--                   Message_Class_Tab
--                   Payment_Term_Details_Tab
--                   Tax_Class_Tab
--                   Tax_Codes_Per_Tax_Class_Tab
--                   User_Group_Finance_Tab
------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------

-- ***** Accounting_Attribute_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_1');
PROMPT To increase the description column in Accounting_Attribute_Tab
DECLARE
   column_          Database_SYS.ColRec;
BEGIN    
   column_ := Database_SYS.Set_Column_Values('DESCRIPTION', 'VARCHAR2(200)');  
   Database_SYS.Alter_Table_Column ( 'ACCOUNTING_ATTRIBUTE_TAB', 'M', column_, TRUE);
END;
/

-- ***** Accounting_Attribute_Tab End *****

-----------------------------------------------------------------------------------------

-- ***** Voucher_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_2');
PROMPT To set the approval information to null when the rowstate is NotApproved in Voucher_Tab   
UPDATE VOUCHER_TAB
   SET approval_date           = NULL,
       approved_by_userid      = NULL,
       approved_by_user_group  = NULL
       WHERE rowstate                = 'Waiting'
         AND (approval_date          IS NOT NULL OR
              approved_by_userid     IS NOT NULL OR
              approved_by_user_group IS NOT NULL);
COMMIT;

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_3');
PROMPT To set interim_voucher column in Voucher_Tab 
UPDATE voucher_tab t
   SET    t.interim_voucher = 'N'
   WHERE  t.interim_voucher IS NULL;
COMMIT;

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_4');
PROMPT Updating Vouchers WITH FUNCTION GROUP 'Z'
DECLARE
   inst_Percos_    CONSTANT BOOLEAN   := Database_SYS.Component_Exist('PERCOS');
   columns_        Database_SYS.ColumnTabType;
   table_name_     VARCHAR2(30)       := 'gen_led_voucher_tab';
   stmt_           VARCHAR2(3000);
BEGIN
   IF (Database_SYS.Table_Exist(table_name_) AND (inst_Percos_)) THEN
      Database_SYS.Reset_Column_Table ( columns_ );
      Database_SYS.Set_Table_Column (columns_ ,'function_group');
      Database_SYS.Set_Table_Column (columns_ ,'rowstate');
      Database_SYS.Create_Index('Voucher_tab',
                                'Voucher_tab_ind_tmp',
                                 columns_,
                                'N',
                                '&IFSAPP_INDEX', 
                                 NULL, 
                                 TRUE,
                                 TRUE);

      stmt_ :=  'UPDATE Voucher_tab t
                   SET    voucher_updated  = ''Y''
                 WHERE  function_group   = ''Z''
                 AND    voucher_updated  = ''N''
                 AND    rowstate         =''Confirmed''
                 AND    EXISTS ( SELECT 1
                                 FROM   gen_led_voucher_tab g
                                 WHERE  t.company           = g.company
                                 AND    t.voucher_type      = g.voucher_type
                                 AND    t.voucher_no        = g.voucher_no
                                 AND    t.accounting_period = g.accounting_period
                                 AND    t.accounting_year   = g.accounting_year)';
      EXECUTE IMMEDIATE stmt_;
      COMMIT;
      Database_SYS.Remove_Indexes ('Voucher_tab',
                                   'Voucher_tab_ind_tmp',
                                   TRUE);
   END IF;
END;
/
 
-- ***** Voucher_Tab End *****   

-- ***** Voucher_No_Serial_Tab  Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_5');
PROMPT Updating Voucher_No_Serial_Tab
DECLARE

CURSOR get_vou_period IS
   SELECT period, ROWID 
   FROM Voucher_No_Serial_Tab v
   WHERE ( period = 99 AND EXISTS (SELECT 1
                                   FROM COMPANY_FINANCE_TAB c
                                   WHERE c.company           = v.company
                                   AND   c.use_vou_no_period = 'TRUE'));
                                   
BEGIN
   FOR rec_ IN get_vou_period LOOP
      BEGIN
         UPDATE Voucher_No_Serial_Tab vn
            SET Period = 0
            WHERE vn.ROWID = rec_.ROWID;
      EXCEPTION
         WHEN dup_val_on_index THEN
            NULL;
         END;
   END LOOP;
   COMMIT;
END;
/
   
-- ***** Voucher_No_Serial_Tab End *****


-----------------------------------------------------------------------------------------


-- ***** Period_Allocation_Rule_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_6');
PROMPT Create new table Period_Allocation_Rule_Tab 
DECLARE
   table_name_      VARCHAR2(30) := 'PERIOD_ALLOCATION_RULE_TAB';
   columns_         Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column (columns_ , 'ALLOCATION_ID',        'NUMBER',       'N' );
   Database_SYS.Set_Table_Column (columns_ , 'PARENT_ALLOCATION_ID', 'NUMBER',       'Y' );
   Database_SYS.Set_Table_Column (columns_ , 'COMPANY',              'VARCHAR2(20)', 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'FROM_DATE',            'DATE',         'N' );
   Database_SYS.Set_Table_Column (columns_ , 'UNTIL_DATE',           'DATE',         'Y' );
   Database_SYS.Set_Table_Column (columns_ , 'STATUS',               'VARCHAR2(5)',  'N' );
   Database_SYS.Set_Table_Column (columns_ , 'TOTAL_AMOUNT',         'NUMBER',       'Y' );
   Database_SYS.Set_Table_Column (columns_ , 'CREATOR',              'VARCHAR2(30)', 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'DISTR_TYPE',           'VARCHAR2(1)',  'N' );
   Database_SYS.Set_Table_Column (columns_ , 'CURRENCY_CODE',        'VARCHAR2(3)',  'N' );
   Database_SYS.Set_Table_Column (columns_ , 'ROWVERSION',           'DATE',         'N' );

   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);  

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column (columns_ , 'ALLOCATION_ID');
   Database_SYS.Create_Constraint ( table_name_,
                                   'PERIOD_ALLOCATION_RULE_PK',
                                    columns_,
                                   'P',
                                   '&IFSAPP_INDEX',
                                    NULL,
                                    TRUE,
                                    TRUE);
     
END;
/

-- ***** Period_Allocation_Rule_Tab  End *****

---------------------------------------------------------------------------------------------

-- ***** Period_Alloc_Rule_Line_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_7');
PROMPT Create new table Period_Allocation_Rule_Tab 
DECLARE
   table_name_      VARCHAR2(30) := 'PERIOD_ALLOC_RULE_LINE_TAB';
   columns_         Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column (columns_ , 'ALLOCATION_ID',        'NUMBER',       'N' );
   Database_SYS.Set_Table_Column (columns_ , 'ALLOC_LINE_ID',        'NUMBER',       'N' );
   Database_SYS.Set_Table_Column (columns_ , 'ACCOUNTING_YEAR',      'NUMBER',       'N' );
   Database_SYS.Set_Table_Column (columns_ , 'ACCOUNTING_PERIOD',    'NUMBER',       'N' );
   Database_SYS.Set_Table_Column (columns_ , 'PERCENTAGE',           'NUMBER',       'N' );
   Database_SYS.Set_Table_Column (columns_ , 'AMOUNT',               'NUMBER',       'Y' );
   Database_SYS.Set_Table_Column (columns_ , 'ALLOCATION_DIFF',      'VARCHAR2(5)',  'Y' );
   Database_SYS.Set_Table_Column (columns_ , 'ROWVERSION',           'DATE',         'N' );
      
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column (columns_ , 'ALLOCATION_ID');
   Database_SYS.Set_Table_Column (columns_ , 'ALLOC_LINE_ID');
   Database_SYS.Create_Constraint ( 'PERIOD_ALLOC_RULE_LINE_TAB',
                                    'PERIOD_ALLOC_RULE_LINE_PK', 
                                     columns_,
                                    'P', 
                                    '&IFSAPP_INDEX',
                                    NULL,
                                    TRUE,
                                    TRUE);
         
END;
/


-- ***** Period_Alloc_Rule_Line_Tab  End *****

---------------------------------------------------------------------------------------------

-- ***** Period_Allocation_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_8');
PROMPT Add column alloc_line_id to Period_Allocation_Tab
DECLARE  
  column_  Database_SYS.ColRec;
BEGIN 
  column_ := Database_SYS.Set_Column_Values('ALLOC_LINE_ID', 'NUMBER', 'Y' );
  Database_SYS.Alter_Table_Column ('PERIOD_ALLOCATION_TAB', 'A', column_ , TRUE);          
END;  
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_9');
PROMPT Creating index Period_Allocation_Ix1 for Period_Allocation_Tab
DECLARE
   columns_         Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table (columns_);
   Database_SYS.Set_Table_Column (columns_, 'ALLOC_LINE_ID');
   Database_SYS.Create_Index('PERIOD_ALLOCATION_TAB',
                             'PERIOD_ALLOCATION_IX1',
                             columns_,
                             'N', 
                             '&IFSAPP_INDEX', 
                             NULL, 
                             TRUE, 
                             TRUE);
END;
/

-- ***** Period_Allocation_Tab End *****  

---------------------------------------------------------------------------------------------

-- ***** Voucher_Row_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_10');
PROMPT Add column allocation_id,parent_allocation_id, activate_code to Voucher_Row_Tab
DECLARE  
  column_  Database_SYS.ColRec;
BEGIN 
   column_ := Database_SYS.Set_Column_Values('ALLOCATION_ID', 'NUMBER', 'Y' );
   Database_SYS.Alter_Table_Column ('VOUCHER_ROW_TAB', 'A', column_ , TRUE);
   column_ := Database_SYS.Set_Column_Values('PARENT_ALLOCATION_ID', 'NUMBER', 'Y' );
   Database_SYS.Alter_Table_Column ('VOUCHER_ROW_TAB', 'A', column_ , TRUE);
   column_ := Database_SYS.Set_Column_Values('ACTIVATE_CODE', 'VARCHAR2(20)', 'Y' );
   Database_SYS.Alter_Table_Column ( 'VOUCHER_ROW_TAB', 'A', column_, TRUE );
END;  
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_11');
PROMPT Creating temporary index, Voucher_Row_Temp_Ind1 for Voucher_Row_Tab
DECLARE
   columns_         Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table (columns_);
   Database_SYS.Set_Table_Column (columns_, 'TRANS_CODE');
   Database_SYS.Set_Table_Column (columns_, 'CORRECTED');
   Database_SYS.Create_Index( 'VOUCHER_ROW_TAB',
                              'VOUCHER_ROW_TEMP_IND1', 
                               columns_,
                               'N', 
                               '&IFSAPP_INDEX', 
                               NULL, 
                               TRUE, 
                               TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_12');
PROMPT Updated third_currency_credit_amount in Voucher_Row_Tab
DECLARE
   columns_         Database_SYS.ColumnTabType;
BEGIN
   UPDATE VOUCHER_ROW_TAB t
   SET t.third_currency_credit_amount = -1*(t.third_currency_credit_amount ) 
   WHERE     t.corrected              =  'N'  
   AND       t.trans_code IN ('FAP25','FAP26','FAP27','FAP12','FAP0','FAP8')
   AND       t.third_currency_credit_amount < 0 
   AND EXISTS ( SELECT 1
                FROM VOUCHER_TYPE_DETAIL_TAB t1
                WHERE  t1.company        =  t.company
                AND    t1.voucher_type   =  t.voucher_type
                AND    t1.function_group =  'A') ;
                                   
   Database_SYS.Remove_Indexes ('VOUCHER_ROW_TAB','VOUCHER_ROW_TEMP_IND1', TRUE);                     
   COMMIT;   
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_13');
PROMPT Updating Voucher_Row_Tab, Period_Allocation_Tab for all the F vouchers already created
DECLARE
   company_             voucher_row_tab.company%TYPE;
   voucher_type_        voucher_row_tab.voucher_type%TYPE;
   accounting_year_     voucher_row_tab.accounting_year%TYPE;
   voucher_no_          voucher_row_tab.voucher_no%TYPE;
   row_no_              voucher_row_tab.row_no%TYPE;
   trans_code_          voucher_row_tab.trans_code%TYPE;
   allocation_id_       voucher_row_tab.allocation_id%TYPE;
   objid_               VARCHAR2(2000);
   --
   CURSOR get_data IS 
      SELECT company, 
             voucher_type, 
             accounting_year, 
             voucher_no, 
             row_no,
             trans_code, 
             allocation_id, 
             rowid
      FROM   VOUCHER_ROW_TAB
      WHERE  allocation_id   IS NOT NULL
      AND   (trans_code     LIKE 'IP%'
         OR  trans_code     LIKE 'PP%');

   FUNCTION Any_Allocation (
      company_         IN VARCHAR2,
      voucher_type_    IN VARCHAR2,
      voucher_no_      IN NUMBER,
      accounting_year_ IN NUMBER ) RETURN VARCHAR2
   IS
      CURSOR period_alloc IS
         SELECT 'X'
         FROM   PERIOD_ALLOCATION_TAB
         WHERE  company         = company_
         AND    voucher_type    = voucher_type_
         AND    voucher_no      = voucher_no_
         AND    accounting_year = accounting_year_;
   
      dummy_ VARCHAR2(1);
   BEGIN
      OPEN period_alloc ;
      FETCH period_alloc INTO dummy_;
      IF (period_alloc%FOUND) THEN
         CLOSE period_alloc;
         RETURN('Y');
      ELSE
         CLOSE period_alloc;
         RETURN('N');
      END IF;
   END Any_Allocation;
BEGIN
   OPEN  get_data;
      LOOP
         FETCH get_data INTO company_, 
                             voucher_type_, 
                             accounting_year_, 
                             voucher_no_, 
                             row_no_,
                             trans_code_,
                             allocation_id_,
                             objid_;
         EXIT WHEN get_data%NOTFOUND;
         UPDATE VOUCHER_ROW_TAB
            SET allocation_id = NULL
         WHERE  ROWID = objid_;
         IF (Any_Allocation (company_, voucher_type_, voucher_no_, accounting_year_) = 'Y') THEN
            DELETE
            FROM   PERIOD_ALLOCATION_TAB
            WHERE  company         = company_
            AND    voucher_type    = voucher_type_
            AND    voucher_no      = voucher_no_
            AND    row_no          = row_no_
            AND    accounting_year = accounting_year_;
         END IF;
      END LOOP;
      COMMIT;
   CLOSE get_data;   
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_14');
PROMPT Creating INDEX voucher_row_ind7 FOR voucher_row_tab
DECLARE
   columns_         Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table ( columns_ );
   Database_SYS.Set_Table_Column (columns_, 'allocation_id');
   Database_SYS.Create_Index('voucher_row_tab', 
                             'voucher_row_ind7', 
                             columns_,
                             'N', 
                             '&IFSAPP_INDEX', 
                             NULL, 
                             TRUE, 
                             TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_15');
PROMPT Creating temporary table  voucher_row_900
DECLARE
   columns_    Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column(columns_ , 'company',           'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_ , 'updated',           'VARCHAR2(2)',  'N');
   Database_SYS.Set_Table_Column(columns_ , 'proj_code_part',    'VARCHAR2(1)',  'Y');
   Database_SYS.Set_Table_Column(columns_ , 'obj_code_part',     'VARCHAR2(1)',  'Y');
   Database_SYS.Set_Table_Column(columns_ , 'no_of_rows',        'NUMBER',       'Y');
   Database_SYS.Create_Table('voucher_row_900', columns_, '&IFSAPP_DATA',NULL, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_16');
PROMPT Inserting relevant data to temporary table
BEGIN
   INSERT INTO voucher_row_900
     SELECT vrt.company,'N',NULL,NULL,COUNT(vrt.company)
     FROM voucher_row_tab vrt
     GROUP BY vrt.company;
   COMMIT;

   UPDATE voucher_row_900 t
      SET t.proj_code_part = (SELECT cp.code_part
                                FROM accounting_code_part_tab cp
                               WHERE cp.company            = t.company
                                 AND cp.code_part_function = 'PRACC');
   UPDATE voucher_row_900 t
      SET t.obj_code_part = (SELECT cp.code_part
                               FROM accounting_code_part_tab cp
                              WHERE cp.company           = t.company
                               AND cp.code_part_function = 'FAACC');
   DELETE
     FROM voucher_row_900 t
    WHERE t.proj_code_part IS NULL
      AND t.obj_code_part IS NULL;

   COMMIT;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_17');
PROMPT Updating project_id and object_id columns  in voucher_row_tab
DECLARE
   company_                 VARCHAR2(20);
   proj_code_part_          VARCHAR2(1);
   obj_code_part_           VARCHAR2(1);
   no_rows_                 NUMBER;
   rowid_                   UROWID;
   updt_stmt_               VARCHAR2(2000);
   continue_                BOOLEAN;

   CURSOR Driver IS
      SELECT t.company,
             t.proj_code_part,
             t.obj_code_part,
             t.no_of_rows,
             t.ROWID
        FROM voucher_row_900 t
       WHERE t.updated = 'N'
    ORDER BY t.company;

   FUNCTION Get_Proj_Or_Obj_CP_Stmt_(
      project_or_obj_cp_ IN VARCHAR2 ) RETURN VARCHAR2
   IS
      proj_obj_code_part_stmt_    VARCHAR2(2000);
   BEGIN
      IF (project_or_obj_cp_ = 'B') THEN
         proj_obj_code_part_stmt_ := 'vrt.code_b ';
      ELSIF (project_or_obj_cp_ = 'C') THEN
         proj_obj_code_part_stmt_ := 'vrt.code_c ';
      ELSIF (project_or_obj_cp_ = 'D') THEN
         proj_obj_code_part_stmt_ := 'vrt.code_d ';
      ELSIF (project_or_obj_cp_ = 'E') THEN
         proj_obj_code_part_stmt_ := 'vrt.code_e ';
      ELSIF (project_or_obj_cp_ = 'F') THEN
         proj_obj_code_part_stmt_ := 'vrt.code_f ';
      ELSIF (project_or_obj_cp_ = 'G') THEN
         proj_obj_code_part_stmt_ := 'vrt.code_g ';
      ELSIF (project_or_obj_cp_ = 'H') THEN
         proj_obj_code_part_stmt_ := 'vrt.code_h ';
      ELSIF (project_or_obj_cp_ = 'I') THEN
         proj_obj_code_part_stmt_ := 'vrt.code_i ';
      ELSIF (project_or_obj_cp_ = 'J') THEN
         proj_obj_code_part_stmt_ := 'vrt.code_j ';
      ELSE
         proj_obj_code_part_stmt_ := NULL;
      END IF;
      RETURN  proj_obj_code_part_stmt_;
   END Get_Proj_Or_Obj_CP_Stmt_;

   PROCEDURE Get_Update_Statement
      (update_statement_       OUT VARCHAR2,
       company_                 IN VARCHAR2,
       project_code_part_       IN VARCHAR2,
       object_code_part_        IN VARCHAR2 )
   IS
      proj_code_part_stmt_    VARCHAR2(200);
      obj_code_part_stmt_     VARCHAR2(200);
      comp_specific_whr_stmt_ VARCHAR2(200);
      where_statement_        VARCHAR2(200);
   BEGIN
      proj_code_part_stmt_     := Get_Proj_Or_Obj_CP_Stmt_(project_code_part_);
      obj_code_part_stmt_      := Get_Proj_Or_Obj_CP_Stmt_(object_code_part_);
      update_statement_        := 'UPDATE voucher_row_tab vrt ';

      where_statement_         := ' WHERE vrt.company  = '||''''||company_||'''';

      IF (proj_code_part_stmt_ IS NOT NULL AND obj_code_part_stmt_ IS NOT NULL) THEN
          update_statement_       := update_statement_ || 'SET vrt.project_id = ' || proj_code_part_stmt_ ||', ';
         update_statement_        := update_statement_ ||     'vrt.object_id  = ' || obj_code_part_stmt_;
         comp_specific_whr_stmt_  := ' AND ('||proj_code_part_stmt_ ||' IS NOT NULL OR '||obj_code_part_stmt_||' IS NOT NULL)';
         comp_specific_whr_stmt_  := comp_specific_whr_stmt_||' AND ( vrt.project_id IS NULL OR vrt.object_id IS NULL)';
      ELSIF (proj_code_part_stmt_ IS NOT NULL) THEN
         update_statement_        := update_statement_ || 'SET vrt.project_id = ' || proj_code_part_stmt_ ;
         comp_specific_whr_stmt_  := ' AND '||proj_code_part_stmt_||' IS NOT NULL ';
         comp_specific_whr_stmt_  := comp_specific_whr_stmt_||' AND  vrt.project_id IS NULL ';
      ELSIF (obj_code_part_stmt_ IS NOT NULL) THEN
         update_statement_        := update_statement_ || 'SET vrt.object_id = ' || obj_code_part_stmt_ ;
         comp_specific_whr_stmt_  := ' AND '||obj_code_part_stmt_||' IS NOT NULL ';
         comp_specific_whr_stmt_  := comp_specific_whr_stmt_||' AND vrt.object_id IS NULL';
      END IF;
      update_statement_  := update_statement_ || where_statement_||comp_specific_whr_stmt_;
   END Get_Update_Statement;

BEGIN
   OPEN Driver;
   FETCH Driver INTO company_ ,
                     proj_code_part_,
                     obj_code_part_,
                     no_rows_,
                     rowid_;

   IF (Driver%FOUND) THEN
      continue_  := TRUE;
   ELSE
      continue_  := FALSE;
   END IF;
   CLOSE Driver;

   WHILE (continue_) LOOP
      Get_Update_Statement ( updt_stmt_,
                             company_,
                             proj_code_part_,
                             obj_code_part_ );

      EXECUTE IMMEDIATE updt_stmt_;

      UPDATE voucher_row_900 t
         SET t.UPDATED = 'Y'
       WHERE t.ROWID = rowid_;
      COMMIT;

      OPEN Driver;
      FETCH Driver INTO company_ ,
                        proj_code_part_,
                        obj_code_part_,
                        no_rows_,
                        rowid_;
      IF (Driver%FOUND) THEN
         continue_  := TRUE;
      ELSE
         continue_  := FALSE;
      END IF;
      CLOSE Driver;
   END LOOP;

   IF (Driver%ISOPEN) THEN
      CLOSE Driver;
   END IF;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_18');
PROMPT Removing temporary table  voucher_row_900
BEGIN
   Database_SYS.Remove_Table('voucher_row_900');
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_19');
PROMPT Creating INDEX voucher_row_ind8 FOR voucher_row_tab
DECLARE
   columns_         Database_SYS.ColumnTabType;
BEGIN
   
   
   Database_SYS.Reset_Column_Table ( columns_ );
   Database_SYS.Set_Table_Column (columns_, 'account');
   Database_SYS.Set_Table_Column (columns_, 'year_period_key');
   Database_SYS.Set_Table_Column (columns_, 'company');
   Database_SYS.Create_Index('voucher_row_tab', 
                             'voucher_row_ind8', 
                              columns_,
                              'N', 
                              '&IFSAPP_INDEX', 
                              NULL, 
                              TRUE, 
                              TRUE);
END;
/

-- ***** Voucher_Row_Tab End *****
---------------------------------------------------------------------------------------------

-- ***** Voucher_Tab and Voucher_Row_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_20');
PROMPT To update text in Voucher_Tab and Voucher_Row_Tab for clear cost revenue vouchers and year end rollback vouchers
DECLARE
   TYPE company_ IS TABLE OF voucher_tab.company%TYPE 
               INDEX BY BINARY_INTEGER;

   TYPE voucher_no_ IS TABLE OF voucher_tab.voucher_no%TYPE 
               INDEX BY BINARY_INTEGER;

   TYPE voucher_type_ IS TABLE OF voucher_tab.voucher_type%TYPE 
               INDEX BY BINARY_INTEGER;

   TYPE accounting_year_ IS TABLE OF voucher_tab.accounting_year%TYPE 
               INDEX BY BINARY_INTEGER;
               
   TYPE voucher_text2_ IS TABLE OF voucher_tab.voucher_text2%TYPE 
               INDEX BY BINARY_INTEGER;   
               
   TYPE accounting_period_ IS TABLE OF voucher_tab.accounting_period%TYPE 
               INDEX BY BINARY_INTEGER;  
   
   ref_company_tab              company_;
   ref_voucher_no_tab           voucher_no_;
   ref_voucher_type_tab         voucher_type_; 
   ref_accounting_year_tab      accounting_year_; 
   ref_voucher_text2_tab        voucher_text2_; 
   ref_accounting_period_tab    accounting_period_;
   i_                           NUMBER ;
BEGIN
   SELECT company, 
          voucher_no, 
          voucher_type, 
          accounting_year, 
          voucher_text2
   BULK COLLECT INTO ref_company_tab, 
                     ref_voucher_no_tab, 
                     ref_voucher_type_tab, 
                     ref_accounting_year_tab, 
                     ref_voucher_text2_tab   
   FROM   voucher_tab
   WHERE  voucher_text2 LIKE 'Clearing of Year End Balances for year %';   
      
   IF ref_company_tab.COUNT > 0 THEN
      FORALL i_ IN ref_company_tab.FIRST..ref_company_tab.LAST 
         UPDATE voucher_row_tab
         SET    text            = ref_voucher_text2_tab(i_)
         WHERE  company         = ref_company_tab(i_)
         AND    voucher_no      = ref_voucher_no_tab(i_)
         AND    voucher_type    = ref_voucher_type_tab(i_)
         AND    accounting_year = ref_accounting_year_tab(i_);
         COMMIT;   
   END IF;      
     
   SELECT vt.company, 
          vt.voucher_no, 
          vt.voucher_type, 
          vt.accounting_year, 
          vt.accounting_period
   BULK COLLECT INTO ref_company_tab, 
                     ref_voucher_no_tab, 
                     ref_voucher_type_tab, 
                     ref_accounting_year_tab,
                     ref_accounting_period_tab             
   FROM   VOUCHER_TAB vt
   WHERE  vt.function_group  = 'YE'
   AND EXISTS (SELECT  1 
               FROM    VOUCHER_ROW_TAB vrt
               WHERE   vrt.company         = vt.company
               AND     vrt.voucher_no      = vt.voucher_no 
               AND     vrt.voucher_type    = vt.voucher_type
               AND     vrt.accounting_year = vt.accounting_year
               AND     vrt.trans_code      = 'ROLLBACK')
   AND    vt.voucher_text2   IS NULL;
      
   IF ref_company_tab.COUNT > 0 THEN
      FORALL i_ IN ref_company_tab.FIRST..ref_company_tab.LAST
         UPDATE VOUCHER_TAB
         SET    voucher_text2     = DECODE(ref_accounting_period_tab(i_),0,'Opening Balance' ,'Closing Balance')
         WHERE  company           = ref_company_tab(i_)
         AND    voucher_no        = ref_voucher_no_tab(i_)
         AND    voucher_type      = ref_voucher_type_tab(i_)
         AND    accounting_year   = ref_accounting_year_tab(i_);
                                   
      FORALL i_ IN ref_company_tab.FIRST..ref_company_tab.LAST   
         UPDATE VOUCHER_ROW_TAB
         SET    text              = DECODE(ref_accounting_period_tab(i_),0,'Opening Balance' ,'Closing Balance')
         WHERE  company           = ref_company_tab(i_)
         AND    voucher_no        = ref_voucher_no_tab(i_)
         AND    voucher_type      = ref_voucher_type_tab(i_)
         AND    accounting_year   = ref_accounting_year_tab(i_);
   END IF;                                                       
   COMMIT;  
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_21');
PROMPT Erronously created Customer vouchers with negative voucher numbers are removed 
DECLARE 
   columns_  Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column (columns_, 'FUNCTION_GROUP');
   Database_SYS.Create_Index( 'VOUCHER_TAB',
                              'VOUCHER_IND_TEMP',
                              columns_,
                              'N',
                              NULL,
                              NULL,
                              TRUE,
                              TRUE);

   DELETE FROM VOUCHER_TAB v
   WHERE v.function_group = 'F'
   AND   v.voucher_no < 0
   AND NOT EXISTS (SELECT 1
                   FROM  VOUCHER_ROW_TAB r
                   WHERE v.company         = r.company
                   AND   v.voucher_type    = r.voucher_type
                   AND   v.accounting_year = r.accounting_year
                   AND   v.voucher_no      = r.voucher_no);

   Database_SYS.Remove_Indexes('VOUCHER_TAB', 
                               'VOUCHER_IND_TEMP', 
                               TRUE);   
   COMMIT;   
END;
/

-- ***** Voucher_Tab and Voucher_Row_Tab End *****

---------------------------------------------------------------------------------------------


-- ***** Accounting_Period_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_22');
PROMPT Adding Report_From_Date, Report_Until_Date, cal_year ,cal_month COLUMNS TO Accounting_Period_Tab
DECLARE
   table_name_ VARCHAR2(30) := 'ACCOUNTING_PERIOD_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('REPORT_FROM_DATE', 'DATE');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('REPORT_UNTIL_DATE', 'DATE');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   column_ := Database_SYS.Set_Column_Values('CAL_YEAR', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
   
   column_ := Database_SYS.Set_Column_Values('CAL_MONTH', 'NUMBER', 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;          
/

-- ***** Accounting_Period_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Tax_Code_Per_Tax_Book_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_23');
PROMPT To insert tax codes that have deductible less than 100 into Tax_Code_Per_Tax_Book_Tab for all tax books having
PROMPT tax directions RECEIVED and DISBURSEDRECEIVE and tax book code ALL 
BEGIN
      INSERT INTO TAX_CODE_PER_TAX_BOOK_TAB      
      (company,      tax_book_id,      fee_code,      rowversion)   
      SELECT tb.company, tb.tax_book_id, sf.fee_code, SYSDATE      
      FROM   TAX_BOOK_TAB tb, STATUTORY_FEE_TAB sf       
      WHERE  tb.tax_code = 'ALL'      
      AND    tb.tax_direction_sp IN ('RECEIVED' , 'DISBURSEDRECEIVED')      
      AND    sf.company = tb.company      
      AND    sf.deductible < 100      
      AND NOT EXISTS (SELECT 1 FROM TAX_CODE_PER_TAX_BOOK_TAB tc 
                      WHERE  tc.company     = tb.company 
                      AND    tc.tax_book_id = tb.tax_book_id 
                      AND    tc.fee_code    =  sf.fee_code);   
     COMMIT;
END;
/

-- ***** Tax_Code_Per_Tax_Book_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** Project_Cost_Element_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_24');
PROMPT Adding COLUMN TO PROJECT_COST_ELEMENT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'PROJECT_COST_ELEMENT_TAB';
   column_     Database_SYS.ColRec;
BEGIN 
   column_ := Database_SYS.Set_Column_Values('ELEMENT_TYPE', 'VARCHAR2(20)' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/


-- Updating element_type column with a default value
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_25');
PROMPT Updating PROJECT_COST_ELEMENT_TAB, updating the ELEMENT_TYPE column.

UPDATE PROJECT_COST_ELEMENT_TAB 
   SET element_type = 'COST'
   WHERE element_type IS NULL;
COMMIT;


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_26');
PROMPT Updated default_cost_element,obsolete column values   
UPDATE PROJECT_COST_ELEMENT_TAB  
   SET default_cost_element = DECODE(default_cost_element, 'Y', 'TRUE', 'N', 'FALSE',default_cost_element),
       obsolete             = DECODE(obsolete, 'Y', 'TRUE', 'N', 'FALSE', obsolete);
COMMIT;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_27');
PROMPT Adding COLUMN to PROJECT_COST_ELEMENT_TAB
DECLARE
   column_  Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('Default_No_Base', 'VARCHAR2(5)', 'Y' );
   Database_SYS.Alter_Table_Column ('PROJECT_COST_ELEMENT_TAB', 'A', column_ , TRUE );
END;
/ 
-- ***** Project_Cost_Element_Tab End *****


---------------------------------------------------------------------------------------------

-- ***** Ext_File_Xml_Layout_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_28');
PROMPT Create new table Ext_File_Xml_Layout_Tab 
DECLARE
   table_name_      VARCHAR2(30) := 'EXT_FILE_XML_LAYOUT_TAB';
   columns_         Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column (columns_ , 'LAYOUT_ID',            'VARCHAR2(30)', 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'DESCRIPTION',          'VARCHAR2(50)', 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'BIZAPI_NAME',          'VARCHAR2(30)', 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'PARENT_LAYOUT_ID',     'VARCHAR2(30)', 'Y' );
   Database_SYS.Set_Table_Column (columns_ , 'ROWVERSION',           'DATE',         'N' );
      
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   Database_SYS.Reset_Column_Table (columns_);
   Database_SYS.Set_Table_Column (columns_ , 'LAYOUT_ID');
   Database_SYS.Create_Constraint ( table_name_,
                                   'EXT_FILE_XML_LAYOUT_PK',
                                    columns_,
                                   'P',
                                   '&IFSAPP_INDEX',
                                    NULL,
                                    TRUE,
                                    TRUE);

END;
/

-- ***** Ext_File_Xml_Layout_Tab  End *****

-------------------------------------------------------------------------------------------

-- ***** Ext_File_Trans_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_29');
PROMPT Add columns to Ext_File_Trans_Tab
DECLARE
   column_          Database_SYS.ColRec;
   count_           NUMBER;
BEGIN
   count_ := 80;
   LOOP
      count_ := count_ + 1;
      IF (count_ > 99) THEN
         EXIT;
      END IF;
      column_ := Database_SYS.Set_Column_Values('c'||count_, 'VARCHAR2(2000)', 'Y' );
      Database_SYS.Alter_Table_Column ('EXT_FILE_TRANS_TAB', 'A', column_ , TRUE);
   END LOOP;
   column_ := Database_SYS.Set_Column_Values('C0', 'VARCHAR2(2000)', 'Y' );
   Database_SYS.Alter_Table_Column ('EXT_FILE_TRANS_TAB', 'A', column_ , TRUE);

   count_ := 40;
   LOOP
      count_ := count_ + 1;
      IF (count_ > 99) THEN
         EXIT;
      END IF;
      column_ := Database_SYS.Set_Column_Values('n'||count_, 'NUMBER', 'Y' );
      Database_SYS.Alter_Table_Column ('EXT_FILE_TRANS_TAB', 'A', column_ , TRUE);
   END LOOP;
   column_ := Database_SYS.Set_Column_Values('N0', 'NUMBER', 'Y' );
   Database_SYS.Alter_Table_Column ('EXT_FILE_TRANS_TAB', 'A', column_ , TRUE);

   column_ := Database_SYS.Set_Column_Values('PARENT_ROW_NO', 'NUMBER', 'Y' );
   Database_SYS.Alter_Table_Column ('EXT_FILE_TRANS_TAB', 'A', column_ , TRUE);
END;          
/

-- ***** Ext_File_Trans_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Ext_File_Template_Dir_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_30');
PROMPT Adding xml_layout_id to Ext_File_Template_Dir_Tab 
DECLARE
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('XML_LAYOUT_ID', 'VARCHAR2(30)', 'Y' );
   Database_SYS.Alter_Table_Column ('EXT_FILE_TEMPLATE_DIR_TAB', 'A', column_ , TRUE);

   column_ := Database_SYS.Set_Column_Values('FILE_NAME', 'VARCHAR2(2000)', 'Y' );
   Database_SYS.Alter_Table_Column ('EXT_FILE_TEMPLATE_DIR_TAB', 'M', column_ , TRUE);

   column_ := Database_SYS.Set_Column_Values('FILE_PATH', 'VARCHAR2(2000)', 'Y' );
   Database_SYS.Alter_Table_Column ('EXT_FILE_TEMPLATE_DIR_TAB', 'M', column_ , TRUE);

   column_ := Database_SYS.Set_Column_Values('FILE_PATH_SERVER', 'VARCHAR2(2000)', 'Y' );
   Database_SYS.Alter_Table_Column ('EXT_FILE_TEMPLATE_DIR_TAB', 'M', column_ , TRUE);

   column_ := Database_SYS.Set_Column_Values('BACKUP_FILE_PATH', 'VARCHAR2(2000)', 'Y' );
   Database_SYS.Alter_Table_Column ('EXT_FILE_TEMPLATE_DIR_TAB', 'M', column_ , TRUE);

   column_ := Database_SYS.Set_Column_Values('BACKUP_FILE_PATH_SERVER', 'VARCHAR2(2000)', 'Y' );
   Database_SYS.Alter_Table_Column ('EXT_FILE_TEMPLATE_DIR_TAB', 'M', column_ , TRUE);

END;          
/

-- ***** Ext_File_Template_Dir_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Accounting_Codestr_Comb_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_31');
PROMPT Added comb_rule_id to Accounting_Codestr_Comb_Tab 
DECLARE
   table_name_ VARCHAR2(30) := 'ACCOUNTING_CODESTR_COMB_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('COMB_RULE_ID', 'NUMBER');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;          
/

-- ***** Accounting_Codestr_Comb_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Comb_Rule_Id_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_32');
PROMPT Creating table COMB_RULE_ID_TAB
DECLARE
   columns_       Database_SYS.ColumnTabType ;
BEGIN 
   Database_SYS.Set_Table_Column (columns_ , 'COMPANY'      , 'VARCHAR2(20)' , 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'COMB_RULE_ID' , 'NUMBER'       , 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'ROWVERSION'   , 'DATE'         , 'N' );

   Database_SYS.Create_Or_Replace_Table('COMB_RULE_ID_TAB' , columns_, '&IFSAPP_DATA', NULL, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'COMB_RULE_ID');
   Database_SYS.Create_Constraint('COMB_RULE_ID_TAB', 'COMB_RULE_ID_TAB_PK', columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE );  
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_33');
PROMPT Updating COMB_RULE_ID COLUMN WITH VALUES FOR existing records
DECLARE
   company_name_ VARCHAR2(20);
   code_comb_id_ NUMBER;
 
   CURSOR get_rec_to_update IS
      SELECT   company, rowid, user_group        
      FROM     ACCOUNTING_CODESTR_COMB_TAB
      WHERE    comb_rule_id IS NULL
      ORDER BY company,user_group
      FOR UPDATE;
BEGIN
   FOR rec_ IN get_rec_to_update LOOP
      IF (company_name_ IS NULL) THEN
         company_name_ := rec_.company;                                                                                            
         code_comb_id_ := 1;                                                                        
      ELSIF company_name_ = rec_.company THEN                            
         code_comb_id_   := code_comb_id_ + 1;                           
      ELSIF company_name_ != rec_.company THEN
          INSERT INTO COMB_RULE_ID_TAB 
          VALUES (company_name_, code_comb_id_, SYSDATE );

          company_name_ := rec_.company; 
          code_comb_id_ := 1;
      END IF;                                                            

      UPDATE ACCOUNTING_CODESTR_COMB_TAB                              
      SET    comb_rule_id           = code_comb_id_                   
      WHERE  rowid                  = rec_.rowid;          

   END LOOP;

   IF (company_name_ IS NOT NULL) THEN
      INSERT INTO COMB_RULE_ID_TAB 
      VALUES (company_name_, code_comb_id_, SYSDATE );
   END IF;
END;
/
COMMIT;

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_34');
PROMPT Setting COMB_RULE_ID COLUMN AS NOT NULL IN Accounting_Codestr_Comb_Tab
DECLARE
   column_          Database_SYS.ColRec;
BEGIN
   column_       := Database_SYS.Set_Column_Values('COMB_RULE_ID', 'NUMBER', 'N', NULL, NULL);
   Database_SYS.Alter_Table_Column ('ACCOUNTING_CODESTR_COMB_TAB', 'M', column_, TRUE );
END;
/

-- ***** Comb_Rule_Id_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Voucher_Note_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_35');
PROMPT Creating TABLE VOUCHER_NOTE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'VOUCHER_NOTE_TAB';
   columns_       Database_SYS.ColumnTabType ;
BEGIN       
   Database_SYS.Set_Table_Column (columns_ , 'COMPANY'         , 'VARCHAR2(20)' , 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'ACCOUNTING_YEAR' , 'NUMBER'       , 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'VOUCHER_TYPE'    , 'VARCHAR2(3)'  , 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'VOUCHER_NO'      , 'NUMBER'       , 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'NOTE_ID'         , 'NUMBER'       , 'N' );
   Database_SYS.Set_Table_Column (columns_ , 'ROWVERSION'      , 'DATE'         , 'N' );
      
   Database_SYS.Create_Or_Replace_Table(table_name_ , columns_, '&IFSAPP_DATA', NULL, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column (columns_ , 'COMPANY');
   Database_SYS.Set_Table_Column (columns_ , 'ACCOUNTING_YEAR');
   Database_SYS.Set_Table_Column (columns_ , 'VOUCHER_TYPE');
   Database_SYS.Set_Table_Column (columns_ , 'VOUCHER_NO');
   Database_SYS.Set_Table_Column (columns_ , 'NOTE_ID');       
   Database_SYS.Create_Constraint(table_name_, 'VOUCHER_NOTE_TAB_PK', columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE );  
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_36');
PROMPT Updating existing voucher notes WITH username AND timestap
DECLARE
   user_id_     VARCHAR2(20) := fnd_session_api.Get_App_Owner();

   CURSOR get_rec_to_update IS
      SELECT a.company, a.accounting_year, a.voucher_type, a.voucher_no, a.voucher_text, fin_note_id_seq.NEXTVAL note_id_seq, fin_note_row_no_seq.NEXTVAL row_no_seq        
      FROM   VOUCHER_TAB a
      WHERE  a.voucher_text IS NOT NULL
      AND    a.voucher_updated = 'N'
      AND NOT EXISTS(SELECT 1 
                     FROM   VOUCHER_NOTE_TAB
                     WHERE  company         = a.company 
                     AND    accounting_year = a.accounting_year 
                     AND    voucher_type    = a.voucher_type 
                     AND    voucher_no      = a.voucher_no);

   TYPE company_ IS TABLE OF voucher_tab.company%TYPE 
               INDEX BY BINARY_INTEGER;

   TYPE accounting_year_ IS TABLE OF voucher_tab.accounting_year%TYPE 
               INDEX BY BINARY_INTEGER;

   TYPE voucher_type_ IS TABLE OF voucher_tab.voucher_type%TYPE 
               INDEX BY BINARY_INTEGER;

   TYPE voucher_no_ IS TABLE OF voucher_tab.voucher_no%TYPE 
               INDEX BY BINARY_INTEGER;

   TYPE voucher_text_ IS TABLE OF voucher_tab.voucher_text%TYPE 
               INDEX BY BINARY_INTEGER;

   TYPE note_id_ IS TABLE OF fin_note_tab.note_id%TYPE 
               INDEX BY BINARY_INTEGER;

   TYPE row_no_ IS TABLE OF fin_note_text_tab.row_no%TYPE 
               INDEX BY BINARY_INTEGER;

   TYPE user_ids_ IS TABLE OF fin_note_text_tab.user_id%TYPE 
               INDEX BY BINARY_INTEGER;

   company_tab                     company_;
   accounting_year_tab             accounting_year_;
   voucher_type_tab                voucher_type_;
   voucher_no_tab                  voucher_no_;
   voucher_text_tab                voucher_text_;
   note_id_tab                     note_id_;
   row_no_tab                      row_no_;
   user_ids_tab                    user_ids_; 
   bulk_limit_    CONSTANT NUMBER := 10000;
   i_             NUMBER;
   current_date_  DATE            := SYSDATE;
      
BEGIN
   OPEN get_rec_to_update;
      LOOP
         FETCH get_rec_to_update BULK COLLECT INTO company_tab,
                                                   accounting_year_tab,
                                                   voucher_type_tab,
                                                   voucher_no_tab,
                                                   voucher_text_tab,
                                                   note_id_tab,
                                                   row_no_tab LIMIT bulk_limit_;

         FORALL i_ IN company_tab.FIRST..company_tab.LAST
            INSERT INTO FIN_NOTE_TAB 
               (note_id,
                rowversion)
            VALUES 
               (note_id_tab(i_),
                current_date_);

         FORALL i_ IN company_tab.FIRST..company_tab.LAST
               INSERT INTO FIN_NOTE_TEXT_TAB 
                  (note_id,
                   row_no,
                   text,
                   timestamp,
                   user_id,
                   rowversion)
               VALUES 
                   (note_id_tab(i_),
                    row_no_tab(i_),
                    voucher_text_tab(i_),
                    current_date_,
                    user_id_,
                    current_date_);


         FORALL i_ IN company_tab.FIRST..company_tab.LAST
               INSERT INTO VOUCHER_NOTE_TAB 
                  (company,
                   accounting_year,
                   voucher_type,
                   voucher_no,
                   note_id,
                   rowversion)
               VALUES 
                  (company_tab(i_),
                   accounting_year_tab(i_),
                   voucher_type_tab(i_),
                   voucher_no_tab(i_),
                   note_id_tab(i_),
                   current_date_);

         EXIT WHEN get_rec_to_update%NOTFOUND;
      END LOOP;
   CLOSE get_rec_to_update;
   COMMIT;
END;
/

-- ***** Voucher_Note_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Ext_File_Load_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_37');
PROMPT Modify columns in Ext_File_Load_Tab 
DECLARE
   column_          Database_SYS.ColRec;
BEGIN
    column_ := Database_SYS.Set_Column_Values('FILE_NAME', 'VARCHAR2(2000)', 'Y' );
    Database_SYS.Alter_Table_Column ('EXT_FILE_LOAD_TAB', 'M', column_ , TRUE);
END;          
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_38');
PROMPT Add column to ext_file_load_tab
DECLARE
   column_          Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('XML_LAYOUT_ID', 'VARCHAR2(30)', 'Y' );
   Database_SYS.Alter_Table_Column ('EXT_FILE_LOAD_TAB', 'A', column_ , TRUE);
END;
/

-- ***** Ext_File_Load_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Accrul_Attribute_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_39');
PROMPT Removing MASTER_OR_SLAVE, ACCRUL_ID from Accrul_Attribute_Tab
BEGIN
   DELETE FROM Accrul_Attribute_Tab
   WHERE attribute_name = 'MASTER_OR_SLAVE';

   DELETE FROM Accrul_Attribute_Tab
   WHERE attribute_name = 'ACCRUL_ID';

   COMMIT;
END;
/

-- ***** Accrul_Attribute_Tab End *****

-------------------------------------------------------------------------------------------
 
-- ***** Ext_Transactions_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_40');
PROMPT Update load_type in Ext_Transactions_Tab 
UPDATE EXT_TRANSACTIONS_TAB a
   SET load_type = (SELECT   b.load_type 
                    FROM  EXT_LOAD_INFO_TAB b
                    WHERE  a.company  = b.company
                    AND    a.load_id = b.load_id )
   WHERE a.load_type IS NULL;
COMMIT;

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_41');
PROMPT Adding Currency_Rate to Ext_Transactions_Tab
DECLARE
   table_name_ VARCHAR2(30) := 'Ext_Transactions_Tab';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CURRENCY_RATE', 'NUMBER');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_42');
PROMPT Add column modify_codestr_cmpl TO ext_transactions_tab.

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
      column_ := Database_SYS.Set_Column_Values('modify_codestr_cmpl', 'VARCHAR2(5)', 'Y' );
      Database_SYS.Alter_Table_Column ( 'ext_transactions_tab', 'A', column_ , TRUE );
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_43');
PROMPT UPDATE column modify_codestr_cmpl IN ext_transactions_tab.

BEGIN
      UPDATE ext_transactions_tab 
         SET modify_codestr_cmpl = 'FALSE'
      WHERE modify_codestr_cmpl IS NULL;
      COMMIT;
END;
/

-- ***** Ext_Transactions_Tab End *****
-------------------------------------------------------------------------------------------
 
-- ***** ext_parameters_tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_44');
PROMPT Add column use_codestr_compl to ext_parameters_tab

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
      column_ := Database_SYS.Set_Column_Values('use_codestr_compl', 'VARCHAR2(5)', 'Y' );
      Database_SYS.Alter_Table_Column ( 'ext_parameters_tab', 'A', column_ , TRUE );
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_45');
PROMPT UPDATE column use_codestr_compl IN ext_parameters_tab.

BEGIN
      UPDATE Ext_Parameters_Tab 
         SET use_codestr_compl = 'FALSE'
      WHERE use_codestr_compl IS NULL;
      
      COMMIT;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_46');
PROMPT  Removing index ext_paramaters_p and adding index ext_parameters_pk 

DECLARE
   columns_      Database_SYS.ColumnTabType;
BEGIN
   IF (Database_SYS.Constraint_Exist('ext_paramaters_pk')) THEN
      Database_SYS.Remove_Constraints('ext_parameters_tab','ext_paramaters_pk');
      Database_SYS.Set_Table_Column (columns_ , 'Company');
      Database_SYS.Set_Table_Column (columns_ , 'Load_Type');
      Database_SYS.Create_Constraint ( 'Ext_Parameters_Tab',  'Ext_Parameters_Pk',  columns_, 'P','&IFSAPP_INDEX',NULL,TRUE,TRUE );
   END IF;
END;
/
-- ***** ext_parameters_tab End *****

-------------------------------------------------------------------------------------------

-- ***** ext_type_param_per_set_tab  Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_47');
PROMPT update param_no in ext_type_param_per_set_tab
BEGIN
   UPDATE ext_type_param_per_set_tab
      SET   param_no  = 7
      WHERE file_type ='ExtVoucher'
      AND   param_no  = 6
      AND   set_id    = '1'
      AND NOT EXISTS ( SELECT 1 
                       FROM  ext_type_param_per_set_tab
                       WHERE file_type = 'ExtVoucher'
                       AND   set_id    = '1'
                       AND   param_no  = 7 );
   UPDATE ext_type_param_per_set_tab
      SET   param_no  = 6
      WHERE file_type = 'ExtVoucher'
      AND   param_no  = 5
      AND   set_id    = '1'
      AND NOT EXISTS ( SELECT 1 
                       FROM  ext_type_param_per_set_tab
                       WHERE file_type = 'ExtVoucher'
                       AND   set_id    = '1'
                       AND   param_no  = 6 );
END;
/
COMMIT;

-- ***** ext_type_param_per_set_tab  End *****

---------------------------------------------------------------------------------------------

-- ***** ext_file_type_param_tab  Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_48');
PROMPT update param_no in ext_file_type_param_tab
BEGIN
   UPDATE ext_file_type_param_tab
      SET   param_no  = 7
      WHERE param_no  = 6
      AND   file_type ='ExtVoucher'
      AND NOT EXISTS ( SELECT 1
                       FROM ext_file_type_param_tab
                       WHERE file_type = 'ExtVoucher'
                       AND   param_no  = 7);
   UPDATE ext_file_type_param_tab
      SET   param_no  = 6
      WHERE param_no  = 5
      AND   file_type ='ExtVoucher'
      AND NOT EXISTS ( SELECT 1
                       FROM ext_file_type_param_tab
                       WHERE file_type = 'ExtVoucher'
                       AND   param_no  = 6);
END;
/
COMMIT;

-- ***** ext_file_type_param_tab  End *****

---------------------------------------------------------------------------------------------

-- ***** Company_Finance_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_49');
PROMPT Adding PERIOD_CLOSING_METHOD column to COMPANY_FINANCE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'COMPANY_FINANCE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PERIOD_CLOSING_METHOD', 'VARCHAR2(20)', 'N', '''REVERSIBLE''');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);

   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('USER_DEF_CAL', 'VARCHAR2(5)','Y');
   Database_SYS.Alter_Table_Column ( table_name_, 'A', column_, TRUE);
END;          
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_50');
PROMPT Updating Company_Finance_Tab WITH new VALUES FOR correction_type

UPDATE Company_Finance_Tab
   SET correction_type = 'REVERSE'
 WHERE correction_type = 'MANUALLY';

UPDATE Company_Finance_Tab
   SET correction_type = 'CORRECTION'
 WHERE correction_type = 'AUTOMATICALLY';

UPDATE Company_Finance_Tab
   SET reverse_vou_corr_type = 'REVERSE'
 WHERE reverse_vou_corr_type = 'MANUALLY';

UPDATE Company_Finance_Tab
   SET reverse_vou_corr_type = 'CORRECTION'
 WHERE reverse_vou_corr_type = 'AUTOMATICALLY';

COMMIT;



-- ***** Company_Finance_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** User_Group_Member_Finance_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_51');
PROMPT Deleted some unncecessary records created in companies based on STD-PL
DELETE FROM USER_GROUP_MEMBER_FINANCE_TAB t
  WHERE t.company IN (SELECT c.company
                      FROM COMPANY_TAB c
                      WHERE t.company = c.company
                      AND c.from_template_id = 'STD-PL')
  AND t.userid NOT IN (SELECT v.userid
                       FROM USER_FINANCE_TAB v
                       WHERE v.company = t.company
                       AND v.userid  = t.userid);
COMMIT;
                                 
-- ***** User_Group_Member_Finance_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Ext_Voucher_Row_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_52');
PROMPT Adding Currency_Rate to Ext_Voucher_Row_Tab

DECLARE
   table_name_ VARCHAR2(30) := 'Ext_Voucher_Row_Tab';
   column_     Database_SYS.ColRec;
BEGIN 
   column_ := Database_SYS.Set_Column_Values('CURRENCY_RATE', 'NUMBER');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- ***** Ext_Voucher_Row_Tab End *****

-------------------------------------------------------------------------------------------

-- ***** Transferred_voucher_row_tab Start *****
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_53');
PROMPT Adding VOUCHER_DATE COLUMN TO transferred_voucher_row_tab
DECLARE
   table_name_ VARCHAR2(30) := 'TRANSFERRED_VOUCHER_ROW_TAB';
   column_     Database_SYS.ColRec;
BEGIN 
   column_ := Database_SYS.Set_Column_Values('VOUCHER_DATE', 'DATE');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_54');
PROMPT Update VOUCHER_DATE in transferred_voucher_row_tab
BEGIN
   UPDATE TRANSFERRED_VOUCHER_ROW_TAB a
      SET voucher_date = (SELECT  b.voucher_date 
                          FROM   transferred_voucher_tab b
                          WHERE  a.company         = b.company
                          AND    a.accounting_year = b.accounting_year
                          AND    a.voucher_type    = b.voucher_type
                          AND    a.voucher_no      = b.voucher_no )
      WHERE a.voucher_date IS NULL;
END;
/
COMMIT;

-- ***** Transferred_voucher_row_tab End *****

-------------------------------------------------------------------------------------------


-- ***** accounting_code_part_value_tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_55');
PROMPT Creating Index accounting_code_part_value_tmp
DECLARE
   columns_        Database_SYS.ColumnTabType;
   table_name_     VARCHAR2(30) := 'project_tab';
BEGIN
   IF (Database_SYS.Table_Exist(table_name_)) THEN
      Database_SYS.Reset_Column_Table ( columns_ );
      Database_SYS.Set_Table_Column (columns_ ,'rowtype');
      Database_SYS.Set_Table_Column (columns_ ,'project_origin');
      Database_SYS.Create_Index('accounting_code_part_value_tab',
                                'accounting_code_part_value_tmp',
                                columns_,
                                'N',
                                '&IFSAPP_INDEX', 
                                NULL, 
                                TRUE,
                                TRUE);
   END IF;
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_56');
PROMPT UPDATE project_origin in accounting_code_part_value_tab
DECLARE
   table_name_     VARCHAR2(30) := 'project_tab';
   stmt_           VARCHAR2(3000);
BEGIN
   IF (Database_SYS.Table_Exist(table_name_)) THEN
      stmt_ :=  'UPDATE accounting_code_part_value_tab t
                    SET project_origin = ''PROJECT''
                  WHERE EXISTS (SELECT 1
                                  FROM project_tab p
                                 WHERE t.code_part_value = p.project_id)
                   AND    rowtype = ''AccountingProject''
                   AND    project_origin  =''FINPROJECT'' ';
      EXECUTE IMMEDIATE stmt_;
   END IF;
END;
/
COMMIT;

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_57');
PROMPT Removing Index accounting_code_part_value_tmp
BEGIN
   Database_SYS.Remove_Indexes ('accounting_code_part_value_tab','accounting_code_part_value_tmp', TRUE); 
END;
/

-- ***** accounting_code_part_value_tmp End *****

-------------------------------------------------------------------------------------------

-- ***** statutory_fee_tab Start *****
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_58');
PROMPT Adding tax_reporting_category column to statutory_fee_tab
DECLARE
   table_name_ VARCHAR2(30) := 'STATUTORY_FEE_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('TAX_REPORTING_CATEGORY', 'VARCHAR2(10)','Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);  
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_59');
PROMPT Updates TAX_REPORTING_CATEGORY field IN statutory_fee_tab  
BEGIN
   UPDATE statutory_fee_tab
      SET tax_reporting_category = DECODE(triangulation_trade,'TRUE', 'TRIPARTITE','NONE' );
END;
/
COMMIT;

-- ***** statutory_fee_tab End ***** 

-------------------------------------------------------------------------------------------
-- ***** cost_element_to_account_tab Start ***** 


-- Adding Columns

-- Adding new columns code_part to cost_element_to_account_tab
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_60');
PROMPT Adding COLUMNS CODE_PART TO COST_ELEMENT_TO_ACCOUNT_TAB 
DECLARE
   table_name_ VARCHAR2(30) := 'COST_ELEMENT_TO_ACCOUNT_TAB';
   column_     Database_SYS.ColRec;
BEGIN 
   column_ := Database_SYS.Set_Column_Values('CODE_PART', 'VARCHAR2(1)');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE); 

   column_ := Database_SYS.Set_Column_Values('VALID_FROM', 'DATE' , 'Y');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

-- Updating Columns

-- Updating code_part column with a default value
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_61');
PROMPT Updating the CODE_PART column IN COST_ELEMENT_TO_ACCOUNT_TAB TO the relevent code part. 

UPDATE COST_ELEMENT_TO_ACCOUNT_TAB 
   SET code_part = 'A'
 WHERE code_part IS NULL; 
COMMIT;

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_62');
PROMPT Updating the valid_from column IN COST_ELEMENT_TO_ACCOUNT_TAB.
UPDATE COST_ELEMENT_TO_ACCOUNT_TAB A 
   SET A.valid_from = (SELECT B.valid_from 
                         FROM COMPANY_FINANCE_TAB B
                        WHERE  A.company = B.company)
 WHERE A.valid_from IS NULL;
COMMIT;


-- Modifying Columns

-- Modifying the column valid_from to be a NOT NULL column
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_63');
PROMPT updating the COLUMN valid_from IN COST_ELEMENT_TO_ACCOUNT_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'COST_ELEMENT_TO_ACCOUNT_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('VALID_FROM','DATE', 'N');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE);
END;
/


-- Modifying constraint 

-- Updating the constraint cost_element_to_account_pk 
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_64');
PROMPT Create cost_element_to_account_pk
DECLARE
   columns_         Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Set_Table_Column (columns_ , 'COMPANY');
   Database_SYS.Set_Table_Column (columns_ , 'ACCOUNT');
   Database_SYS.Set_Table_Column (columns_ , 'VALID_FROM');
   Database_SYS.Create_Constraint ( 'COST_ELEMENT_TO_ACCOUNT_TAB',  
                                    'COST_ELEMENT_TO_ACCOUNT_PK', 
                                     columns_, 
                                     'P',  
                                     '&IFSAPP_INDEX',  
                                     NULL,
                                     TRUE,
                                     TRUE);
END;
/

-- ***** cost_element_to_account_tab End ***** 
----------------------------------------------------------------------------------------------------------

-- ***** accounting_code_part_tab Start *****

--Adding new columns base_for_pfe to accounting_code_part_Tab
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_65');
PROMPT Adding COLUMN TO ACCOUNTING_CODE_PART_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'ACCOUNTING_CODE_PART_TAB';
   column_     Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('BASE_FOR_PFE', 'VARCHAR2(30)');
   Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

--Updating base_for_pfe with a default value
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_66');
PROMPT Updating ACCOUNTING_CODE_PART_TAB, updating the BASE_FOR_PFE COLUMN . 

UPDATE accounting_code_part_tab x
   SET base_for_pfe = 'TRUE'
   WHERE (base_for_pfe IS NULL)
   AND code_part    = 'A'
   AND company NOT IN (SELECT DISTINCT a.company
                 FROM   accounting_code_part_tab a,cost_element_to_account_tab b
                 WHERE  a.company      = b.company   (+)
                 AND    a.code_part    = b.code_part (+)
                 AND    a.base_for_pfe = 'TRUE');
COMMIT;

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_67');
PROMPT Insert past data that are missing in ACCOUNTING_CODESTR_COMPL_TAB
DECLARE 
   CURSOR code_part_infor IS
      SELECT t1.code_part codefill_codepart, t1.company, t2.code_part_value,t2.code_part codestr_codepart
      FROM   ACCOUNTING_CODE_PART_TAB t1, 
             ACCOUNTING_CODESTR_COMPL_TAB t2
      WHERE  t1.company = t2.company         
      AND    t1.code_part_used = 'Y'
      AND    t1.code_part NOT IN ( SELECT DISTINCT t3.codefill_code_part
                                   FROM   ACCOUNTING_CODESTR_COMPL_TAB t3
                                   WHERE  t3.company = t2.company                                   
                                   AND    t3.code_part_value =  t2.code_part_value)
      GROUP BY t1.code_part, t1.company, t2.code_part_value, t2.code_part;
   
      
BEGIN

      FOR rec_ IN code_part_infor LOOP
         INSERT INTO accounting_codestr_compl_tab
            (company,
             code_part,
             code_part_value,
             codefill_code_part,
             codefill_value,
             rowversion)
         VALUES
            (rec_.company,
             rec_.codestr_codepart,
             rec_.code_part_value,
             rec_.codefill_codepart,
             NULL,
             SYSDATE);
      END LOOP;
      
      COMMIT; 
END;
/
-- ***** accounting_code_part_tab End *****
-------------------------------------------------------------------------------------------------------------

-- ***** accounting_code_part_value_tab Start *****

--Ersruk Twin Peaks,Balance Sheet by Project, Start
--Adding new column EXCLUDE_PROJ_FOLLOWUP to ACCOUNTING_CODE_PART_VALUE_TAB 
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_68');
PROMPT ADDING COLUMNS TO TABLE ACCOUNTING_CODE_PART_VALUE_TAB
DECLARE
   columns_       Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table( columns_ );
   Database_SYS.Set_Table_Column ( columns_, 'EXCLUDE_PROJ_FOLLOWUP', 'VARCHAR2(5)', 'Y' );
   Database_SYS.Alter_Table ( 'ACCOUNTING_CODE_PART_VALUE_TAB', columns_ );
   Database_SYS.Reset_Column_Table( columns_ );
END;
/

--Update ACCOUNTING_CODE_PART_VALUE_TAB setting default value for EXCLUDE_PROJ_FOLLOWUP to FALSE
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_69');
PROMPT Updating ACCOUNTING_CODE_PART_VALUE_TAB setting default value for EXCLUDE_PROJ_FOLLOWUP. 


UPDATE ACCOUNTING_CODE_PART_VALUE_TAB 
   SET exclude_proj_followup = 'FALSE'
 WHERE exclude_proj_followup IS NULL;
COMMIT;

--Ersruk Twin Peaks,Balance Sheet by Project, End

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_70');
PROMPT Modifying length in CUSTOMER_NO column in ACCOUNTING_CODE_PART_VALUE_TAB 
DECLARE
   table_name_ VARCHAR2(30) := 'ACCOUNTING_CODE_PART_VALUE_TAB';
   column_     Database_SYS.ColRec;
BEGIN 
   column_ := Database_SYS.Set_Column_Values('CUSTOMER_NO', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column(table_name_, 'M', column_, TRUE); 
END;
/



exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_71');
PROMPT Adding PROJECT_REOPENED COLUMN TO ACCOUNTING_CODE_PART_VALUE_TAB
DECLARE
   table_name_ VARCHAR2(30) := 'ACCOUNTING_CODE_PART_VALUE_TAB';
   column_     Database_SYS.ColRec;
BEGIN 
      column_ := Database_SYS.Set_Column_Values('PROJECT_REOPENED', 'VARCHAR2(5)');
      Database_SYS.Alter_Table_Column(table_name_, 'A', column_, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_72');
PROMPT Adding columns to accounting_code_part_value_tab
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_CODE_PART_VALUE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table( columns_ );
   Database_SYS.Set_Table_Column ( columns_, 'CAPITALIZATION_POST_METHOD',    'VARCHAR2(20)',  'Y' );
   Database_SYS.Set_Table_Column ( columns_, 'SPECIFIC_CAP_PRINCIPLES',       'VARCHAR2(5)',   'Y' );
   Database_SYS.Set_Table_Column ( columns_, 'EXCLUDE_PERIODICAL_CAP',        'VARCHAR2(20)',  'Y' );
   Database_SYS.Alter_Table ( table_name_, columns_, TRUE );   
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_73');
PROMPT updating PROJECT_REOPENED COLUMN IN ACCOUNTING_CODE_PART_VALUE_TAB

UPDATE ACCOUNTING_CODE_PART_VALUE_TAB
   SET PROJECT_REOPENED = 'FALSE'
   WHERE PROJECT_REOPENED IS NULL
   AND ROWTYPE LIKE '%AccountingProject';
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_74');
PROMPT Updating column capitalization_post_method to TRANSACTION
BEGIN
   UPDATE accounting_code_part_value_tab
   SET capitalization_post_method = 'TRANSACTION'
   WHERE capitalization_post_method IS NULL
   AND rowtype = 'AccountingProject';
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_75');
PROMPT Updating column specific_cap_principles to FALSE
BEGIN
   UPDATE accounting_code_part_value_tab
   SET specific_cap_principles = 'FALSE'
   WHERE specific_cap_principles IS NULL
   AND rowtype = 'AccountingProject';
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_76');
PROMPT Updating column exclude_periodical_cap to NONE
BEGIN
   UPDATE accounting_code_part_value_tab
   SET exclude_periodical_cap = 'INCLUDE'
   WHERE exclude_periodical_cap IS NULL
   AND    code_part = 'A';
END;
/




exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_77');
PROMPT Creating index ACCOUNT_CODE_PART_VALUE_IX1 for ACCOUNTING_CODE_PART_VALUE_TAB

DECLARE
   columns_         Database_SYS.ColumnTabType;
BEGIN
   Database_SYS.Reset_Column_Table ( columns_ );
   Database_SYS.Set_Table_Column (columns_, 'COMPANY');
   Database_SYS.Set_Table_Column (columns_, 'CODE_PART');
   Database_SYS.Set_Table_Column (columns_, 'SORT_VALUE');
   Database_SYS.Create_Index('ACCOUNTING_CODE_PART_VALUE_TAB',
                             'ACCOUNT_CODE_PART_VALUE_IX1',
                             columns_,
                             'N',
                             '&IFSAPP_INDEX',
                             NULL,
                             TRUE,
                             TRUE);
     
  
END;
/

COMMIT;


-- ***** accounting_code_part_value_tab End *****
-------------------------------------------------------------------------------------------------------------

-- ***** CURRENCY_TYPE_TAB Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_78');
PROMPT Adding column rate_type_category to CURRENCY_TYPE_TAB
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CURRENCY_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table( columns_ );
   Database_SYS.Set_Table_Column ( columns_, 'RATE_TYPE_CATEGORY',      'VARCHAR2(20)',   'Y' );
   Database_SYS.Alter_Table ( table_name_, columns_ );   
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_79');
PROMPT filling data for rate_type_category column in currency_type_tab table
BEGIN
   UPDATE CURRENCY_TYPE_TAB
   SET RATE_TYPE_CATEGORY = 'NORMAL'
   WHERE RATE_TYPE_CATEGORY IS NULL;
END;
/
COMMIT;

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_80');
PROMPT Making column rate_type_category IN CURRENCY_TYPE_TAB NOT NULL
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CURRENCY_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table( columns_ );
   Database_SYS.Set_Table_Column ( columns_, 'RATE_TYPE_CATEGORY',      'VARCHAR2(20)',   'N' );
   Database_SYS.Alter_Table ( table_name_, columns_ );   
END;
/

-- ***** CURRENCY_TYPE_TAB End *****

-------------------------------------------------------------------------------------------------------------

-- ***** CURRENCY_TYPE_DEF_TAB Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_81');
PROMPT Adding column rate_type_category to CURRENCY_TYPE_DEF_TAB
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CURRENCY_TYPE_DEF_TAB';
BEGIN
   Database_SYS.Reset_Column_Table( columns_ );
   Database_SYS.Set_Table_Column ( columns_, 'RATE_TYPE_CATEGORY',      'VARCHAR2(20)',   'Y' );
   Database_SYS.Alter_Table ( table_name_, columns_ );   
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_82');
PROMPT filling data for rate_type_category column in currency_type_def_tab table
BEGIN
   UPDATE CURRENCY_TYPE_DEF_TAB
   SET RATE_TYPE_CATEGORY = 'NORMAL'
   WHERE RATE_TYPE_CATEGORY IS NULL;
END;
/
COMMIT;

-- ***** CURRENCY_TYPE_DEF_TAB End *****

------------------------------------------------------------------------------------------

-- ***** Payment_Term_Details_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_83');
PROMPT Adding institute_id to TABLE Payment_Term_Details_Tab

DECLARE
   column_             Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('INSTITUTE_ID', 'VARCHAR2(20)', 'Y');
   Database_SYS.Alter_Table_Column ('PAYMENT_TERM_DETAILS_TAB', 'A', column_, TRUE);
END;
/

-- ***** Payment_Term_Details_Tab End ******/
------------------------------------------------------------------------------------------

-- ***** Payment_Term_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_84');
PROMPT Adding suppress_amount to TABLE Payment_Term_Tab

DECLARE
   column_             Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('SUPPRESS_AMOUNT', 'VARCHAR2(5)', 'Y' );
   Database_SYS.Alter_Table_Column ('PAYMENT_TERM_TAB', 'A', column_, TRUE);

END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_85');
PROMPT Updating COLUMN suppress_amount IN TABLE Payment_Term_Tab

DECLARE
   column_             Database_SYS.ColRec;
BEGIN
   
   UPDATE  PAYMENT_TERM_TAB
      SET  SUPPRESS_AMOUNT = 'FALSE' 
    WHERE  SUPPRESS_AMOUNT IS NULL ;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('SUPPRESS_AMOUNT', 'VARCHAR2(5)', 'N' );
   Database_SYS.Alter_Table_Column ('PAYMENT_TERM_TAB', 'M', column_, TRUE);

END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_86');
PROMPT Making column EXCLUDE_CREDIT_LIMIT NOT NULL in TABLE Payment_Term_Tab
DECLARE
   column_             Database_SYS.ColRec;
BEGIN
   
   UPDATE  PAYMENT_TERM_TAB
      SET  EXCLUDE_CREDIT_LIMIT = 'FALSE' 
    WHERE  EXCLUDE_CREDIT_LIMIT IS NULL ;
   COMMIT;

   column_ := Database_SYS.Set_Column_Values('EXCLUDE_CREDIT_LIMIT', 'VARCHAR2(5)', 'N' );
   Database_SYS.Alter_Table_Column ('PAYMENT_TERM_TAB', 'M', column_, TRUE);

END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_87');
PROMPT Updating the COLUMN EXCLUDE_CREDIT_LIMIT IN TABLE Payment_Term_Tab

DECLARE
   column_             Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('EXCLUDE_CREDIT_LIMIT', NULL, 'N', '$DEFAULT_NULL$' );
   Database_SYS.Alter_Table_Column ('PAYMENT_TERM_TAB', 'M', column_, TRUE);

END;
/

-- ***** Payment_Term_Tab End ******/
------------------------------------------------------------------------------------------

-- ***** Tax_Class_Tab Start ****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_88');
PROMPT Create table Tax_Class_Tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TAX_CLASS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_ , 'COMPANY',      'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_ , 'TAX_CLASS_ID', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_ , 'DESCRIPTION',  'VARCHAR2(100)','N');
   Database_SYS.Set_Table_Column(columns_ , 'ROWVERSION',   'DATE',         'N');
   IF (Database_SYS.Table_Exist(table_name_)) THEN
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   ELSE
      Database_SYS.Create_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'TAX_CLASS_ID');
   Database_SYS.Create_Constraint(table_name_, 'TAX_CLASS_PK', columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Tax_Class_Tab  END ****
------------------------------------------------------------------------------------------

-- ***** Tax_Codes_Per_Tax_Class_Tab Start ****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_89');
PROMPT Create table Tax_Codes_Per_Tax_Class_Tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'TAX_CODES_PER_TAX_CLASS_TAB';
BEGIN
   Database_SYS.Set_Table_Column(columns_ , 'COMPANY',       'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_ , 'TAX_CLASS_ID',  'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_ , 'COUNTRY_CODE',  'VARCHAR2(2)',  'N');
   Database_SYS.Set_Table_Column(columns_ , 'TAX_LIABILITY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_ , 'VALID_FROM',    'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_ , 'FEE_CODE',      'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_ , 'ROWVERSION',    'DATE', 'N');
   IF (Database_SYS.Table_Exist(table_name_)) THEN
      Database_SYS.Alter_Table(table_name_, columns_, TRUE);
   ELSE
      Database_SYS.Create_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
   END IF;

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'TAX_CLASS_ID');
   Database_SYS.Set_Table_Column(columns_, 'COUNTRY_CODE');
   Database_SYS.Set_Table_Column(columns_, 'TAX_LIABILITY');
   Database_SYS.Set_Table_Column(columns_, 'VALID_FROM');

   Database_SYS.Create_Constraint(table_name_, 'TAX_CODES_PER_TAX_CLASS_PK', columns_, 'P', '&IFSAPP_INDEX',
   NULL, TRUE, TRUE);
END;
/

-- ***** Tax_Codes_Per_Tax_Class_Tab END ****

-----------------------------------------------------------------------------------------

-- ***** Cost_Ele_To_Accnt_Secmap_Tab Start ****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_90');
PROMPT Create table Cost_Ele_To_Accnt_Secmap_Tab
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'COST_ELE_TO_ACCNT_SECMAP_TAB';
BEGIN
   Database_SYS.Set_Table_Column (columns_ , 'COMPANY',                'VARCHAR2(20)',   'N');  
   Database_SYS.Set_Table_Column (columns_ , 'ACCOUNT',                'VARCHAR2(20)',   'N');  
   Database_SYS.Set_Table_Column (columns_ , 'PROJECT_COST_ELEMENT',   'VARCHAR2(100)',  'Y');
   Database_SYS.Set_Table_Column (columns_ , 'CODE_PART',              'VARCHAR2(1)',    'Y');
   Database_SYS.Set_Table_Column (columns_ , 'VALID_FROM',             'DATE',           'N');
   Database_SYS.Set_Table_Column (columns_ , 'ROWVERSION',             'DATE',           'N');
   Database_SYS.Set_Table_Column (columns_ , 'ROWKEY',                 'VARCHAR2(50)',   'Y');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column (columns_ , 'COMPANY' );
   Database_SYS.Set_Table_Column (columns_ , 'ACCOUNT' );
   Database_SYS.Set_Table_Column (columns_ , 'VALID_FROM' );
   Database_SYS.Create_Constraint(table_name_, 'COST_ELE_TO_ACCNT_SECMAP_PK', columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Tax_Class_Tab  END ****
------------------------------------------------------------------------------------------

-- ***** User_Group_Finance_Tab Begin ****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_91');
PROMPT  Updating  USER_GROUP_FINANCE_TAB 

DECLARE
   columns_        Database_SYS.ColRec;
BEGIN
   columns_ := Database_SYS.Set_Column_Values('Allowed_Accounting_Period', NULL, 'N', '$DEFAULT_NULL$');
   Database_SYS.Alter_Table_Column('USER_GROUP_FINANCE_TAB','M',columns_,TRUE); 
END;
/  

-- *****  User_Group_Finance_Tab End ****

-----------------------------------------------------------------------------------------

-- ***** Posting_Ctrl_Control_Type_Tab Begin ****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_92');
PROMPT  Updating  POSTING_CTRL_CONTROL_TYPE_TAB 

DECLARE
   columns_        Database_SYS.ColRec;
BEGIN
   columns_ := Database_SYS.Set_Column_Values('CTRL_TYPE_CATEGORY', NULL, 'N','$DEFAULT_NULL$');
   Database_SYS.Alter_Table_Column('POSTING_CTRL_CONTROL_TYPE_TAB','M',columns_,TRUE); 
END;
/  

-- *****  Posting_Ctrl_Control_Type_Tab End ****

-----------------------------------------------------------------------------------------

-- ***** Posting_Ctrl_Tab Begin ****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_93');
PROMPT  Updating  POSTING_CTRL_TAB 

DECLARE
   columns_        Database_SYS.ColRec;
BEGIN
   columns_ := Database_SYS.Set_Column_Values('CTRL_TYPE_CATEGORY', NULL, 'N','$DEFAULT_NULL$');
   Database_SYS.Alter_Table_Column('POSTING_CTRL_TAB','M',columns_,TRUE); 
END;
/  

-- *****  Posting_Ctrl_Tab End ****

-----------------------------------------------------------------------------------------


-- ****************  Accounting_Year_tab Start ****************************************

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_94');
PROMPT  Updating  Accounting_Year_tab

BEGIN
   UPDATE Accounting_Year_tab
   SET    open_bal_consolidated = 'N'
   WHERE  open_bal_consolidated IS NULL;       
                        

   COMMIT; 
END;
/
-- ****************  Accounting_Year_tab End ****************************************




-- ***** Fin Selection Template Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_95');
PROMPT Creating New Tables related to Fin Selection Template
DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_OBJECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
  
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_OBJECT_TAB';
   index_name_ VARCHAR2(30) := 'FIN_OBJECT_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_OBJ_GRP_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'GROUP_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_OBJ_GRP_TAB';
   index_name_ VARCHAR2(30) := 'FIN_OBJ_GRP_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_SEL_OBJECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OBJECT_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DATA_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OBJECT_TYPE', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'MODULE', 'VARCHAR2(6)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LU', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'LOV_REFERENCE', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'DYNAMIC_LOV_DEPENDENCY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ZOOM_WINDOW', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ZOOM_WINDOW_COL_KEY', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ZOOM_WINDOW_PARENT_COL_KEY', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'IS_CODE_PART', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'CODE_PART', 'VARCHAR2(20)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_COL_ID', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_COL_DESC', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_INPUT', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_SEL_OBJECT_TAB';
   index_name_ VARCHAR2(30) := 'FIN_SEL_OBJECT_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OBJECT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_SEL_OBJECT_ALLOW_OPER_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OBJECT_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OPERATOR',  'VARCHAR2(20)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',          'DATE',          'N');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);

END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_SEL_OBJECT_ALLOW_OPER_TAB';
   index_name_ VARCHAR2(30) := 'FIN_SEL_OBJECT_ALLOW_OPER_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OBJECT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OPERATOR');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_OBJ_GRP_OBJECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_OBJ_GRP_OBJECT_TAB';
   index_name_ VARCHAR2(30) := 'FIN_OBJ_GRP_OBJECT_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_OBJ_GRP_SEL_OBJECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OBJECT_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SORT_ORDER', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REPORT_COLUMN', 'VARCHAR2(30)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_OBJ_GRP_SEL_OBJECT_TAB';
   index_name_ VARCHAR2(30) := 'FIN_OBJ_GRP_SEL_OBJECT_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OBJECT_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_SEL_OBJ_TEMPL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TEMPLATE_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OWNERSHIP', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OWNER', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DEFAULT_TEMPLATE', 'VARCHAR2(5)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_SEL_OBJ_TEMPL_TAB';
   index_name_ VARCHAR2(30) := 'FIN_SEL_OBJ_TEMPL_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID');
   Database_SYS.Set_Table_Column(columns_, 'TEMPLATE_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_SEL_OBJ_TEMPL_DET_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TEMPLATE_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OBJECT_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OPERATOR', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_FROM', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_TO', 'VARCHAR2(50)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_FROM_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_TO_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_EXIST', 'VARCHAR2(5)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_INPUT', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_SEL_OBJ_TEMPL_DET_TAB';
   index_name_ VARCHAR2(30) := 'FIN_SEL_OBJ_TEMPL_DET_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID');
   Database_SYS.Set_Table_Column(columns_, 'TEMPLATE_ID');
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_SEL_TEMPL_VALUES_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID', 'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'TEMPLATE_ID', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALUE', 'VARCHAR2(50)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_SEL_TEMPL_VALUES_TAB';
   index_name_ VARCHAR2(30) := 'FIN_SEL_TEMPL_VALUES_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID');
   Database_SYS.Set_Table_Column(columns_, 'TEMPLATE_ID');
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID');
   Database_SYS.Set_Table_Column(columns_, 'VALUE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Fin Selection Template End *****

---------------------------------------------------------------------------------------------

-- ***** Fin Report Selection Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_96');
PROMPT Adding Fin_Report_Selection_Tab 

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_OBJECT_SELECTION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY',           'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID',   'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_ID',         'VARCHAR2(30)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_ID',      'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID',           'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_OBJECT_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'OPERATOR',          'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_FROM',        'VARCHAR2(100)','Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_TO',          'VARCHAR2(100)','Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_FROM_DATE',   'DATE',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_TO_DATE',     'DATE',         'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_FROM_NUMBER', 'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_TO_NUMBER',   'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'VALUE_EXIST',       'VARCHAR2(5)',  'Y');
   Database_SYS.Set_Table_Column(columns_, 'MANUAL_INPUT',      'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RESULT_KEY',        'NUMBER',       'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',        'DATE',         'N');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_OBJECT_SELECTION_TAB';
   index_name_ VARCHAR2(30) := 'FIN_OBJECT_SELECTION_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_ID');
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_97');
PROMPT Adding Fin_Rep_Selection_Values_Tab 

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'FIN_OBJ_SELECTION_VALUES_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY',          'VARCHAR2(20)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID',  'VARCHAR2(30)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_ID',        'VARCHAR2(30)',  'N');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_ID',      'NUMBER',       'N');
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID',          'NUMBER',        'N');
   Database_SYS.Set_Table_Column(columns_, 'VALUE',            'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION',       'DATE',          'N');
   
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'FIN_OBJ_SELECTION_VALUES_TAB';
   index_name_ VARCHAR2(30) := 'FIN_OBJ_SELECTION_VALUES_PK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'COMPANY' );
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_GROUP_ID');
   Database_SYS.Set_Table_Column(columns_, 'OBJECT_ID');
   Database_SYS.Set_Table_Column(columns_, 'SELECTION_ID');
   Database_SYS.Set_Table_Column(columns_, 'ITEM_ID');
   Database_SYS.Set_Table_Column(columns_, 'VALUE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** Fin Report Selection End *****


---------------------------------------------------------------------------------------------

-- ***** Create Sequences Start *****


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_98');
PROMPT Create sequence Period_Allocation_Seq
BEGIN
   Database_SYS.Create_Sequence('PERIOD_ALLOCATION_SEQ', 'MINVALUE 1  START WITH 1 INCREMENT BY 1', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_99');
PROMPT Create sequence Period_Alloc_Line_Seq
BEGIN
   Database_SYS.Create_Sequence('PERIOD_ALLOC_LINE_SEQ', 'MINVALUE 1  START WITH 1 INCREMENT BY 1', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_100');
PROMPT Create sequence fin_selection_object_id_seq
BEGIN
   Database_SYS.Create_Sequence ('fin_selection_object_id_seq', 'INCREMENT BY 1 START WITH 1 ORDER',TRUE);
END;
/

-- ***** Create Sequences End *****


---------------------------------------------------------------------------------------------

-- ***** Disabling B component from Master Start*****

DEFINE PARENT_MODULE = ACCRUL
DEFINE CHILD_MODULE  = ACCRUB

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_101');
PROMPT If B component &CHILD_MODULE exists:
PROMPT    Transfer ROLES granted for &CHILD_MODULE POs to &PARENT_MODULE Also disable the version of the B component
 
DECLARE
   CURSOR get_granted_roles IS
      SELECT *          
      FROM PRES_OBJECT_GRANT_TAB p1
      WHERE po_id = '&CHILD_MODULE'||'ifsExcelReport'
      AND NOT EXISTS ( SELECT 1 
                       FROM PRES_OBJECT_GRANT_TAB p2
                       WHERE po_id   = '&PARENT_MODULE'||'ifsExcelReport'
                       AND   p1.role = p2.role);

   FUNCTION Module_Exists___(module_ IN VARCHAR2) RETURN BOOLEAN
   IS
   BEGIN
      Module_API.Exist(module_);
      RETURN TRUE;
   EXCEPTION
      WHEN OTHERS THEN
         RETURN FALSE;
   END Module_Exists___;
BEGIN
  IF (Module_Exists___('&CHILD_MODULE')) THEN
     FOR rec_ IN get_granted_roles LOOP
        Security_SYS.Grant_Pres_Object('&PARENT_MODULE'||'ifsExcelReport', rec_.role, 'TRUE');        
     END LOOP;       
     Pres_Object_Util_API.Reset_Repository('&CHILD_MODULE');
     -- disble B component (child module)
     Module_API.Set_Version('&CHILD_MODULE', NULL, NULL);
     COMMIT;
   END IF;
END;
/

UNDEFINE PARENT_MODULE
UNDEFINE CHILD_MODULE

-- ***** Disabling B component from Master End **** 


---------------------------------------------------------------------------------------------

-- ***** Rename Obsolete Tables Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_102');
PROMPT RENAME Obsolete TABLES
PROMPT Rename Table  Posting_Ctrl_Def_Tab

BEGIN
   IF (Database_SYS.Table_Exist('Posting_Ctrl_Def_Tab')) THEN
      Database_SYS.Rename_Table('Posting_Ctrl_Def_Tab','Posting_Ctrl_Def_900',TRUE);
   END IF;
END;          
/

-- ***** Rename Obsolete Tables End *****

---------------------------------------------------------------------------------------------

-- ***** Removing obsolete packages Start *****
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_103');
PROMPT Removing obsolete packages
PROMPT Removing package ACCOUNTING_CODE_PART_NAME_API
BEGIN
   Database_SYS.Remove_Package('ACCOUNTING_CODE_PART_NAME_API', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_104');
PROMPT Removing package AUTHORIZE_FINANCE_API
BEGIN
   Database_SYS.Remove_Package('AUTHORIZE_FINANCE_API', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_105');
PROMPT Removing package AUTHORIZE_FINANCE_IID_API
BEGIN
   Database_SYS.Remove_Package('AUTHORIZE_FINANCE_IID_API', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_106');
PROMPT Removing package BASE_FOR_DISC_DATE_API
BEGIN
   Database_SYS.Remove_Package('BASE_FOR_DISC_DATE_API', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_107');
PROMPT Removing package COMPANY_FINANCE_LOG_API
BEGIN
   Database_SYS.Remove_Package('COMPANY_FINANCE_LOG_API', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_108');
PROMPT Removing package DISTRIBUTED_VOU_TRANSFER_API
BEGIN
   Database_SYS.Remove_Package('DISTRIBUTED_VOU_TRANSFER_API', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_109');
PROMPT Removing package QUANTITIES_INCLUDED_API
BEGIN
   Database_SYS.Remove_Package('QUANTITIES_INCLUDED_API', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_110');
PROMPT Removing package STATISTICAL_INCLUDED_API
BEGIN
   Database_SYS.Remove_Package('STATISTICAL_INCLUDED_API', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_111');
PROMPT Removing package VOUCHER_GROUP_API
BEGIN
   Database_SYS.Remove_Package('VOUCHER_GROUP_API', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_112');
PROMPT Removing package VOUCHER_TRANSFER_ID_API
BEGIN
   Database_SYS.Remove_Package('VOUCHER_TRANSFER_ID_API', TRUE);
END;
/

-- ***** Removing obsolete packages End *****
---------------------------------------------------------------------------------------------
-- ***** Removing obsolete views Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_113');
PROMPT Removing obsolete views
PROMPT Removing view VOUCHER_GROUP
BEGIN
   Database_SYS.Remove_View('VOUCHER_GROUP', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_114');
PROMPT Removing view TAX_CODE_LOV
BEGIN
   Database_SYS.Remove_View('TAX_CODE_LOV', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_115');
PROMPT Removing view ACCOUNT_PROCESS_CODE_LOV
BEGIN
   Database_SYS.Remove_View('ACCOUNT_PROCESS_CODE_LOV', TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_116');
PROMPT Removing view VOUCHER_TYPE_USER_GRP_VOU_GRP
BEGIN
   Database_SYS.Remove_View('VOUCHER_TYPE_USER_GRP_VOU_GRP', TRUE );
END;
/

-- ***** Removing obsolete views End *****

-----------------------------------------------------------------------------

-- ***** Custom Fields Upgrade Section Begin *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_117');
PROMPT Add Column ROWKEY to AC_AM_STR.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'AC_AM_STR';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_118');
PROMPT Create new index AC_AM_STR_RK on AC_AM_STR.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'AC_AM_STR';
   index_name_  VARCHAR2(30)  := 'AC_AM_STR_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_119');
PROMPT Add Column ROWKEY to AC_AM_STR_ALLOWED_COMB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'AC_AM_STR_ALLOWED_COMB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_120');
PROMPT Create new index AC_AM_STR_ALLOWED_COMB_RK on AC_AM_STR_ALLOWED_COMB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'AC_AM_STR_ALLOWED_COMB';
   index_name_  VARCHAR2(30)  := 'AC_AM_STR_ALLOWED_COMB_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_121');
PROMPT Add Column ROWKEY to AC_AM_STR_CODE.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'AC_AM_STR_CODE';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_122');
PROMPT Create new index AC_AM_STR_CODE_RK on AC_AM_STR_CODE.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'AC_AM_STR_CODE';
   index_name_  VARCHAR2(30)  := 'AC_AM_STR_CODE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_123');
PROMPT Add Column ROWKEY to AC_AM_STR_CONTROL_TYPE.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'AC_AM_STR_CONTROL_TYPE';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_124');
PROMPT Create new index AC_AM_STR_CONTROL_TYPE_RK on AC_AM_STR_CONTROL_TYPE.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'AC_AM_STR_CONTROL_TYPE';
   index_name_  VARCHAR2(30)  := 'AC_AM_STR_CONTROL_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_125');
PROMPT Add Column ROWKEY to AC_AM_STR_ROW.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'AC_AM_STR_ROW';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_126');
PROMPT Create new index AC_AM_STR_ROW_RK on AC_AM_STR_ROW.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'AC_AM_STR_ROW';
   index_name_  VARCHAR2(30)  := 'AC_AM_STR_ROW_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_127');
PROMPT Add Column ROWKEY to ACCOUNT_GROUP_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNT_GROUP_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_128');
PROMPT Create new index ACCOUNT_GROUP_RK on ACCOUNT_GROUP_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNT_GROUP_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNT_GROUP_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_129');
PROMPT Add Column ROWKEY to ACCOUNT_TYPE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNT_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_130');
PROMPT Create new index ACCOUNT_TYPE_RK on ACCOUNT_TYPE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNT_TYPE_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNT_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_131');
PROMPT Add Column ROWKEY to ACCOUNTING_CODE_PART_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_CODE_PART_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_132');
PROMPT Create new index ACCOUNTING_CODE_PART_RK on ACCOUNTING_CODE_PART_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_CODE_PART_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_CODE_PART_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_133');
PROMPT Add Column ROWKEY to ACCOUNTING_CODE_PART_VALUE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_CODE_PART_VALUE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_134');
PROMPT Create new index ACCOUNTING_CODE_PART_VALUE_RK on ACCOUNTING_CODE_PART_VALUE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_CODE_PART_VALUE_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_CODE_PART_VALUE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_135');
PROMPT Add Column ROWKEY to ACCOUNTING_CODESTR_COMB_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_CODESTR_COMB_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_136');
PROMPT Create new index ACCOUNTING_CODESTR_COMB_RK on ACCOUNTING_CODESTR_COMB_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_CODESTR_COMB_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_CODESTR_COMB_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_137');
PROMPT Add Column ROWKEY to ACCOUNTING_CODESTR_COMPL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_CODESTR_COMPL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_138');
PROMPT Create new index ACCOUNTING_CODESTR_COMPL_RK on ACCOUNTING_CODESTR_COMPL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_CODESTR_COMPL_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_CODESTR_COMPL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_139');
PROMPT Add Column ROWKEY to ACCOUNTING_PERIOD_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_PERIOD_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_140');
PROMPT Create new index ACCOUNTING_PERIOD_RK on ACCOUNTING_PERIOD_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_PERIOD_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_PERIOD_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_141');
PROMPT Add Column ROWKEY to ACCRUL_ATTRIBUTE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCRUL_ATTRIBUTE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_142');
PROMPT Create new index ACCRUL_ATTRIBUTE_RK on ACCRUL_ATTRIBUTE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCRUL_ATTRIBUTE_TAB';
   index_name_  VARCHAR2(30)  := 'ACCRUL_ATTRIBUTE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_143');
PROMPT Add Column ROWKEY to ACCOUNTING_YEAR_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_YEAR_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/ 


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_144');
PROMPT Create new index ACCOUNTING_YEAR_RK on ACCOUNTING_YEAR_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_YEAR_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_YEAR_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_145');
PROMPT Add Column ROWKEY to ACCOUNTING_PROCESS_CODE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_PROCESS_CODE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_146');
PROMPT Create new index ACCOUNTING_PROCESS_CODE_RK on ACCOUNTING_PROCESS_CODE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_PROCESS_CODE_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_PROCESS_CODE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_147');
PROMPT Add Column ROWKEY to ACCOUNTING_SEQ_NO_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_SEQ_NO_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_148');
PROMPT Create new index ACCOUNTING_SEQ_NO_RK on ACCOUNTING_SEQ_NO_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_SEQ_NO_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_SEQ_NO_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_149');
PROMPT Add Column ROWKEY to ACCOUNTING_TEXT_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_TEXT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_150');
PROMPT Create new index ACCOUNTING_TEXT_RK on ACCOUNTING_TEXT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_TEXT_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_TEXT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_151');
PROMPT Add Column ROWKEY to CODESTRING_COMB_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CODESTRING_COMB_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_152');
PROMPT Create new index CODESTRING_COMB_RK on CODESTRING_COMB_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'CODESTRING_COMB_TAB';
   index_name_  VARCHAR2(30)  := 'CODESTRING_COMB_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_153');
PROMPT Add Column ROWKEY to COMPANY_FINANCE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'COMPANY_FINANCE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_154');
PROMPT Create new index COMPANY_FINANCE_RK on COMPANY_FINANCE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'COMPANY_FINANCE_TAB';
   index_name_  VARCHAR2(30)  := 'COMPANY_FINANCE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_155');
PROMPT Add Column ROWKEY to COMB_CONTROL_TYPE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'COMB_CONTROL_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_156');
PROMPT Create new index COMB_CONTROL_TYPE_RK on COMB_CONTROL_TYPE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'COMB_CONTROL_TYPE_TAB';
   index_name_  VARCHAR2(30)  := 'COMB_CONTROL_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_157');
PROMPT Add Column ROWKEY to CURRENCY_CODE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CURRENCY_CODE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_158');
PROMPT Create new index CURRENCY_CODE_RK on CURRENCY_CODE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'CURRENCY_CODE_TAB';
   index_name_  VARCHAR2(30)  := 'CURRENCY_CODE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_159');
PROMPT Add Column ROWKEY to CURRENCY_RATE_DEF_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CURRENCY_RATE_DEF_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_160');
PROMPT Create new index CURRENCY_RATE_DEF_RK on CURRENCY_RATE_DEF_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'CURRENCY_RATE_DEF_TAB';
   index_name_  VARCHAR2(30)  := 'CURRENCY_RATE_DEF_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_161');
PROMPT Add Column ROWKEY to CURRENCY_RATE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CURRENCY_RATE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_162');
PROMPT Create new index CURRENCY_RATE_RK on CURRENCY_RATE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'CURRENCY_RATE_TAB';
   index_name_  VARCHAR2(30)  := 'CURRENCY_RATE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_163');
PROMPT Add Column ROWKEY to CURRENCY_TYPE_DEF_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CURRENCY_TYPE_DEF_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_164');
PROMPT Create new index CURRENCY_TYPE_DEF_RK on CURRENCY_TYPE_DEF_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'CURRENCY_TYPE_DEF_TAB';
   index_name_  VARCHAR2(30)  := 'CURRENCY_TYPE_DEF_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_165');
PROMPT Add Column ROWKEY to CURRENCY_TYPE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CURRENCY_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_166');
PROMPT Create new index CURRENCY_TYPE_RK on CURRENCY_TYPE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'CURRENCY_TYPE_TAB';
   index_name_  VARCHAR2(30)  := 'CURRENCY_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_167');
PROMPT Add Column ROWKEY to EXT_CURRENCY_TASK_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_CURRENCY_TASK_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_168');
PROMPT Create new index EXT_CURRENCY_TASK_RK on EXT_CURRENCY_TASK_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_CURRENCY_TASK_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_CURRENCY_TASK_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_169');
PROMPT Add Column ROWKEY to EXT_CURRENCY_TASK_DETAIL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_CURRENCY_TASK_DETAIL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_170');
PROMPT Create new index EXT_CURRENCY_TASK_DETAIL_RK on EXT_CURRENCY_TASK_DETAIL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_CURRENCY_TASK_DETAIL_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_CURRENCY_TASK_DETAIL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_171');
PROMPT Add Column ROWKEY to EXT_LOAD_ID_STORAGE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_LOAD_ID_STORAGE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_172');
PROMPT Create new index EXT_LOAD_ID_STORAGE_RK on EXT_LOAD_ID_STORAGE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_LOAD_ID_STORAGE_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_LOAD_ID_STORAGE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_173');
PROMPT Add Column ROWKEY to EXT_LOAD_INFO_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_LOAD_INFO_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_174');
PROMPT Create new index EXT_LOAD_INFO_RK on EXT_LOAD_INFO_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_LOAD_INFO_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_LOAD_INFO_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_175');
PROMPT Add Column ROWKEY to EXT_FILE_BATCH_PARAM_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_BATCH_PARAM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_176');
PROMPT Create new index EXT_FILE_BATCH_PARAM_RK on EXT_FILE_BATCH_PARAM_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_BATCH_PARAM_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_BATCH_PARAM_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_177');
PROMPT Add Column ROWKEY to EXT_PARAMETERS_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_PARAMETERS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_178');
PROMPT Create new index EXT_PARAMETERS_RK on EXT_PARAMETERS_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_PARAMETERS_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_PARAMETERS_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_179');
PROMPT Add Column ROWKEY to EXT_FILE_SEPARATOR_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_SEPARATOR_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_180');
PROMPT Create new index EXT_FILE_SEPARATOR_RK on EXT_FILE_SEPARATOR_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_SEPARATOR_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_SEPARATOR_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_181');
PROMPT Add Column ROWKEY to EXT_FILE_TEMPLATE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_TEMPLATE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_182');
PROMPT Create new index EXT_FILE_TEMPLATE_RK on EXT_FILE_TEMPLATE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_TEMPLATE_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_TEMPLATE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_183');
PROMPT Add Column ROWKEY to EXT_FILE_TEMPLATE_CONTROL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_TEMPLATE_CONTROL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_184');
PROMPT Create new index EXT_FILE_TEMPLATE_CONTROL_RK on EXT_FILE_TEMPLATE_CONTROL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_TEMPLATE_CONTROL_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_TEMPLATE_CONTROL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_185');
PROMPT Add Column ROWKEY to EXT_FILE_TEMPLATE_DETAIL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_TEMPLATE_DETAIL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_186');
PROMPT Create new index EXT_FILE_TEMPLATE_DETAIL_RK on EXT_FILE_TEMPLATE_DETAIL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_TEMPLATE_DETAIL_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_TEMPLATE_DETAIL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_187');
PROMPT Add Column ROWKEY to EXT_FILE_TEMPLATE_DIR_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_TEMPLATE_DIR_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_188');
PROMPT Create new index EXT_FILE_TEMPLATE_DIR_RK on EXT_FILE_TEMPLATE_DIR_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_TEMPLATE_DIR_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_TEMPLATE_DIR_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_189');
PROMPT Add Column ROWKEY to EXT_FILE_XML_LAYOUT_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_XML_LAYOUT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_190');
PROMPT Create new index EXT_FILE_XML_LAYOUT_RK on EXT_FILE_XML_LAYOUT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_XML_LAYOUT_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_XML_LAYOUT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_191');
PROMPT Add Column ROWKEY to EXT_TRANSACTIONS_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_TRANSACTIONS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_192');
PROMPT Create new index EXT_TRANSACTIONS_RK on EXT_TRANSACTIONS_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_TRANSACTIONS_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_TRANSACTIONS_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_193');
PROMPT Add Column ROWKEY to EXT_TYPE_PARAM_SET_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_TYPE_PARAM_SET_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_194');
PROMPT Create new index EXT_TYPE_PARAM_SET_RK on EXT_TYPE_PARAM_SET_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_TYPE_PARAM_SET_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_TYPE_PARAM_SET_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_195');
PROMPT Add Column ROWKEY to EXT_VOUCHER_ROW_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_VOUCHER_ROW_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_196');
PROMPT Create new index EXT_VOUCHER_ROW_RK on EXT_VOUCHER_ROW_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_VOUCHER_ROW_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_VOUCHER_ROW_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_197');
PROMPT Add Column ROWKEY to EXT_VOUCHER_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_VOUCHER_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_198');
PROMPT Create new index EXT_VOUCHER_RK on EXT_VOUCHER_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_VOUCHER_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_VOUCHER_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_199');
PROMPT Add Column ROWKEY to FINANCE_DOC_REG_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FINANCE_DOC_REG_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_200');
PROMPT Create new index FINANCE_DOC_REG_RK on FINANCE_DOC_REG_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FINANCE_DOC_REG_TAB';
   index_name_  VARCHAR2(30)  := 'FINANCE_DOC_REG_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_201');
PROMPT Add Column ROWKEY to MULTI_COMPANY_VOUCHER_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'MULTI_COMPANY_VOUCHER_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_202');
PROMPT Create new index MULTI_COMPANY_VOUCHER_RK on MULTI_COMPANY_VOUCHER_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'MULTI_COMPANY_VOUCHER_TAB';
   index_name_  VARCHAR2(30)  := 'MULTI_COMPANY_VOUCHER_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_203');
PROMPT Add Column ROWKEY to MULTI_COMPANY_VOUCHER_ROW_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'MULTI_COMPANY_VOUCHER_ROW_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_204');
PROMPT Create new index MULTI_COMPANY_VOUCHER_ROW_RK on MULTI_COMPANY_VOUCHER_ROW_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'MULTI_COMPANY_VOUCHER_ROW_TAB';
   index_name_  VARCHAR2(30)  := 'MULTI_COMPANY_VOUCHER_ROW_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_205');
PROMPT Add Column ROWKEY to PAYMENT_TERM_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'PAYMENT_TERM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_206');
PROMPT Create new index PAYMENT_TERM_RK on PAYMENT_TERM_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'PAYMENT_TERM_TAB';
   index_name_  VARCHAR2(30)  := 'PAYMENT_TERM_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_207');
PROMPT Add Column ROWKEY to PERIOD_ALLOCATION_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'PERIOD_ALLOCATION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_208');
PROMPT Create new index PERIOD_ALLOCATION_RK on PERIOD_ALLOCATION_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'PERIOD_ALLOCATION_TAB';
   index_name_  VARCHAR2(30)  := 'PERIOD_ALLOCATION_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_209');
PROMPT Add Column ROWKEY to POSTING_CTRL_ALLOWED_COMB_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'POSTING_CTRL_ALLOWED_COMB_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_210');
PROMPT Create new index POSTING_CTRL_ALLOWED_COMB_RK on POSTING_CTRL_ALLOWED_COMB_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'POSTING_CTRL_ALLOWED_COMB_TAB';
   index_name_  VARCHAR2(30)  := 'POSTING_CTRL_ALLOWED_COMB_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_211');
PROMPT Add Column ROWKEY to POSTING_CTRL_CONTROL_TYPE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'POSTING_CTRL_CONTROL_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_212');
PROMPT Create new index POSTING_CTRL_CONTROL_TYPE_RK on POSTING_CTRL_CONTROL_TYPE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'POSTING_CTRL_CONTROL_TYPE_TAB';
   index_name_  VARCHAR2(30)  := 'POSTING_CTRL_CONTROL_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_213');
PROMPT Add Column ROWKEY to POSTING_CTRL_DETAIL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'POSTING_CTRL_DETAIL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_214');
PROMPT Create new index POSTING_CTRL_DETAIL_RK on POSTING_CTRL_DETAIL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'POSTING_CTRL_DETAIL_TAB';
   index_name_  VARCHAR2(30)  := 'POSTING_CTRL_DETAIL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_215');
PROMPT Add Column ROWKEY to POSTING_CTRL_DETAIL_TEMP_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'POSTING_CTRL_DETAIL_TEMP_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_216');
PROMPT Create new index POSTING_CTRL_DETAIL_TEMP_RK on POSTING_CTRL_DETAIL_TEMP_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'POSTING_CTRL_DETAIL_TEMP_TAB';
   index_name_  VARCHAR2(30)  := 'POSTING_CTRL_DETAIL_TEMP_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_217');
PROMPT Add Column ROWKEY to POSTING_CTRL_POSTING_TYPE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'POSTING_CTRL_POSTING_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_218');
PROMPT Create new index POSTING_CTRL_POSTING_TYPE_RK on POSTING_CTRL_POSTING_TYPE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'POSTING_CTRL_POSTING_TYPE_TAB';
   index_name_  VARCHAR2(30)  := 'POSTING_CTRL_POSTING_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_219');
PROMPT Add Column ROWKEY to POSTING_CTRL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'POSTING_CTRL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_220');
PROMPT Create new index POSTING_CTRL_RK on POSTING_CTRL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'POSTING_CTRL_TAB';
   index_name_  VARCHAR2(30)  := 'POSTING_CTRL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_221');
PROMPT Add Column ROWKEY to POSTING_CTRL_COMB_DETAIL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'POSTING_CTRL_COMB_DETAIL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_222');
PROMPT Create new index POSTING_CTRL_COMB_DETAIL_RK on POSTING_CTRL_COMB_DETAIL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'POSTING_CTRL_COMB_DETAIL_TAB';
   index_name_  VARCHAR2(30)  := 'POSTING_CTRL_COMB_DETAIL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_223');
PROMPT Add Column ROWKEY to POSTING_CTRL_DETAIL_SPEC_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'POSTING_CTRL_DETAIL_SPEC_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_224');
PROMPT Create new index POSTING_CTRL_DETAIL_SPEC_RK on POSTING_CTRL_DETAIL_SPEC_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'POSTING_CTRL_DETAIL_SPEC_TAB';
   index_name_  VARCHAR2(30)  := 'POSTING_CTRL_DETAIL_SPEC_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_225');
PROMPT Add Column ROWKEY to POSTING_CTRL_COMB_DET_SPEC_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'POSTING_CTRL_COMB_DET_SPEC_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_226');
PROMPT Create new index POSTING_CTRL_COMB_DET_SPEC_RK on POSTING_CTRL_COMB_DET_SPEC_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'POSTING_CTRL_COMB_DET_SPEC_TAB';
   index_name_  VARCHAR2(30)  := 'POSTING_CTRL_COMB_DET_SPEC_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_227');
PROMPT Add Column ROWKEY to PSEUDO_CODES_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'PSEUDO_CODES_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_228');
PROMPT Create new index PSEUDO_CODES_RK on PSEUDO_CODES_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'PSEUDO_CODES_TAB';
   index_name_  VARCHAR2(30)  := 'PSEUDO_CODES_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_229');
PROMPT Add Column ROWKEY to STATUTORY_FEE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'STATUTORY_FEE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_230');
PROMPT Create new index STATUTORY_FEE_RK on STATUTORY_FEE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'STATUTORY_FEE_TAB';
   index_name_  VARCHAR2(30)  := 'STATUTORY_FEE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_231');
PROMPT Add Column ROWKEY to STATUTORY_FEE_DETAIL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'STATUTORY_FEE_DETAIL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_232');
PROMPT Create new index STATUTORY_FEE_DETAIL_RK on STATUTORY_FEE_DETAIL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'STATUTORY_FEE_DETAIL_TAB';
   index_name_  VARCHAR2(30)  := 'STATUTORY_FEE_DETAIL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_233');
PROMPT Add Column ROWKEY to VOUCHER_TEMPLATE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_TEMPLATE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_234');
PROMPT Create new index VOUCHER_TEMPLATE_RK on VOUCHER_TEMPLATE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_TEMPLATE_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_TEMPLATE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_235');
PROMPT Add Column ROWKEY to VOUCHER_TEMPLATE_ROW_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_TEMPLATE_ROW_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_236');
PROMPT Create new index VOUCHER_TEMPLATE_ROW_RK on VOUCHER_TEMPLATE_ROW_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_TEMPLATE_ROW_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_TEMPLATE_ROW_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_237');
PROMPT Add Column ROWKEY to TRANSLATION_TYPE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TRANSLATION_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_238');
PROMPT Create new index TRANSLATION_TYPE_RK on TRANSLATION_TYPE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TRANSLATION_TYPE_TAB';
   index_name_  VARCHAR2(30)  := 'TRANSLATION_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_239');
PROMPT Add Column ROWKEY to TRANSFERRED_VOUCHER_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TRANSFERRED_VOUCHER_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_240');
PROMPT Create new index TRANSFERRED_VOUCHER_RK on TRANSFERRED_VOUCHER_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TRANSFERRED_VOUCHER_TAB';
   index_name_  VARCHAR2(30)  := 'TRANSFERRED_VOUCHER_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_241');
PROMPT Add Column ROWKEY to TRANSFERRED_VOUCHER_ROW_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TRANSFERRED_VOUCHER_ROW_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_242');
PROMPT Create new index TRANSFERRED_VOUCHER_ROW_RK on TRANSFERRED_VOUCHER_ROW_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TRANSFERRED_VOUCHER_ROW_TAB';
   index_name_  VARCHAR2(30)  := 'TRANSFERRED_VOUCHER_ROW_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_243');
PROMPT Add Column ROWKEY to USER_FINANCE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'USER_FINANCE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_244');
PROMPT Create new index USER_FINANCE_RK on USER_FINANCE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'USER_FINANCE_TAB';
   index_name_  VARCHAR2(30)  := 'USER_FINANCE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_245');
PROMPT Add Column ROWKEY to USER_GROUP_FINANCE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'USER_GROUP_FINANCE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_246');
PROMPT Create new index USER_GROUP_FINANCE_RK on USER_GROUP_FINANCE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'USER_GROUP_FINANCE_TAB';
   index_name_  VARCHAR2(30)  := 'USER_GROUP_FINANCE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_247');
PROMPT Add Column ROWKEY to USER_GROUP_MEMBER_FINANCE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'USER_GROUP_MEMBER_FINANCE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_248');
PROMPT Create new index USER_GROUP_MEMBER_FINANCE_RK on USER_GROUP_MEMBER_FINANCE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'USER_GROUP_MEMBER_FINANCE_TAB';
   index_name_  VARCHAR2(30)  := 'USER_GROUP_MEMBER_FINANCE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_249');
PROMPT Add Column ROWKEY to USER_GROUP_PERIOD_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'USER_GROUP_PERIOD_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_250');
PROMPT Create new index USER_GROUP_PERIOD_RK on USER_GROUP_PERIOD_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'USER_GROUP_PERIOD_TAB';
   index_name_  VARCHAR2(30)  := 'USER_GROUP_PERIOD_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_251');
PROMPT Add Column ROWKEY to FUNCTION_GROUP_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FUNCTION_GROUP_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_252');
PROMPT Create new index FUNCTION_GROUP_RK on FUNCTION_GROUP_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FUNCTION_GROUP_TAB';
   index_name_  VARCHAR2(30)  := 'FUNCTION_GROUP_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_253');
PROMPT Add Column ROWKEY to VOUCHER_NO_SERIAL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_NO_SERIAL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_254');
PROMPT Create new index VOUCHER_NO_SERIAL_RK on VOUCHER_NO_SERIAL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_NO_SERIAL_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_NO_SERIAL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_255');
PROMPT Add Column ROWKEY to VOUCHER_ROW_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_ROW_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_256');
PROMPT Create new index VOUCHER_ROW_RK on VOUCHER_ROW_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_ROW_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_ROW_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_257');
PROMPT Add Column ROWKEY to VOUCHER_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_258');
PROMPT Create new index VOUCHER_RK on VOUCHER_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_259');
PROMPT Add Column ROWKEY to VOUCHER_TRANSFER_HIST_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_TRANSFER_HIST_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_260');
PROMPT Create new index VOUCHER_TRANSFER_HIST_RK on VOUCHER_TRANSFER_HIST_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_TRANSFER_HIST_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_TRANSFER_HIST_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_261');
PROMPT Add Column ROWKEY to VOUCHER_TYPE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_262');
PROMPT Create new index VOUCHER_TYPE_RK on VOUCHER_TYPE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_TYPE_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_263');
PROMPT Add Column ROWKEY to VOUCHER_TYPE_DETAIL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_TYPE_DETAIL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_264');
PROMPT Create new index VOUCHER_TYPE_DETAIL_RK on VOUCHER_TYPE_DETAIL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_TYPE_DETAIL_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_TYPE_DETAIL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_265');
PROMPT Add Column ROWKEY to VOUCHER_TYPE_USER_GROUP_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_TYPE_USER_GROUP_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_266');
PROMPT Create new index VOUCHER_TYPE_USER_GROUP_RK on VOUCHER_TYPE_USER_GROUP_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_TYPE_USER_GROUP_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_TYPE_USER_GROUP_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_267');
PROMPT Add Column ROWKEY to VOUCHER_TEXT_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_TEXT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_268');
PROMPT Create new index VOUCHER_TEXT_RK on VOUCHER_TEXT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_TEXT_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_TEXT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_269');
PROMPT Add Column ROWKEY to INTERNAL_POSTINGS_ACCRUL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'INTERNAL_POSTINGS_ACCRUL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_270');
PROMPT Create new index INTERNAL_POSTINGS_ACCRUL_RK on INTERNAL_POSTINGS_ACCRUL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'INTERNAL_POSTINGS_ACCRUL_TAB';
   index_name_  VARCHAR2(30)  := 'INTERNAL_POSTINGS_ACCRUL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_271');
PROMPT Add Column ROWKEY to ACCOUNT_TAX_CODE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNT_TAX_CODE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_272');
PROMPT Create new index ACCOUNT_TAX_CODE_RK on ACCOUNT_TAX_CODE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNT_TAX_CODE_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNT_TAX_CODE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_273');
PROMPT Add Column ROWKEY to ACCRUL_SESSION_PID_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCRUL_SESSION_PID_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_274');
PROMPT Create new index ACCRUL_SESSION_PID_RK on ACCRUL_SESSION_PID_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCRUL_SESSION_PID_TAB';
   index_name_  VARCHAR2(30)  := 'ACCRUL_SESSION_PID_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_275');
PROMPT Add Column ROWKEY to EXT_FILE_TYPE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_TYPE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_276');
PROMPT Updating TARGET_DEFAULT_METHOD field IN EXT_FILE_TYPE_TAB
BEGIN
   UPDATE EXT_FILE_TYPE_TAB
      SET TARGET_DEFAULT_METHOD = 'Ext_Parameters_API.Create_Parameter_Msg'
    WHERE FILE_TYPE = 'ExtCustPayment';
   COMMIT;
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_277');
PROMPT Create new index EXT_FILE_TYPE_RK on EXT_FILE_TYPE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_TYPE_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_TYPE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_278');
PROMPT Add Column ROWKEY to EXT_FILE_IDENTITY_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_IDENTITY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_279');
PROMPT Create new index EXT_FILE_IDENTITY_RK on EXT_FILE_IDENTITY_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_IDENTITY_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_IDENTITY_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_280');
PROMPT Add Column ROWKEY to EXT_FILE_TRANS_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_TRANS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_281');
PROMPT Create new index EXT_FILE_TRANS_RK on EXT_FILE_TRANS_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_TRANS_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_TRANS_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_282');
PROMPT Add Column ROWKEY to EXT_FILE_LOAD_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_LOAD_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_283');
PROMPT Create new index EXT_FILE_LOAD_RK on EXT_FILE_LOAD_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_LOAD_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_LOAD_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_284');
PROMPT Add Column ROWKEY to EXT_FILE_LOG_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_LOG_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_285');
PROMPT Create new index EXT_FILE_LOG_RK on EXT_FILE_LOG_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_LOG_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_LOG_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_286');
PROMPT Add Column ROWKEY to EXT_FILE_LOG_DETAIL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_LOG_DETAIL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_287');
PROMPT Create new index EXT_FILE_LOG_DETAIL_RK on EXT_FILE_LOG_DETAIL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_LOG_DETAIL_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_LOG_DETAIL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_288');
PROMPT Add Column ROWKEY to EXT_FILE_TYPE_PARAM_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_TYPE_PARAM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_289');
PROMPT Create new index EXT_FILE_TYPE_PARAM_RK on EXT_FILE_TYPE_PARAM_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_TYPE_PARAM_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_TYPE_PARAM_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_290');
PROMPT Add Column ROWKEY to EXT_TYPE_PARAM_PER_SET_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_TYPE_PARAM_PER_SET_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_291');
PROMPT Create new index EXT_TYPE_PARAM_PER_SET_RK on EXT_TYPE_PARAM_PER_SET_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_TYPE_PARAM_PER_SET_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_TYPE_PARAM_PER_SET_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_292');
PROMPT Add Column ROWKEY to EXT_FILE_TYPE_REC_COLUMN_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_TYPE_REC_COLUMN_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_293');
PROMPT Create new index EXT_FILE_TYPE_REC_COLUMN_RK on EXT_FILE_TYPE_REC_COLUMN_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_TYPE_REC_COLUMN_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_TYPE_REC_COLUMN_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_294');
PROMPT Add Column ROWKEY to EXT_FILE_TYPE_REC_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_TYPE_REC_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_295');
PROMPT Create new index EXT_FILE_TYPE_REC_RK on EXT_FILE_TYPE_REC_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_TYPE_REC_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_TYPE_REC_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_296');
PROMPT Add Column ROWKEY to EXT_FILE_COMPANY_DEFAULT_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_COMPANY_DEFAULT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_297');
PROMPT Create new index EXT_FILE_COMPANY_DEFAULT_RK on EXT_FILE_COMPANY_DEFAULT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_COMPANY_DEFAULT_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_COMPANY_DEFAULT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_298');
PROMPT Add Column ROWKEY to PAYMENT_TERM_DETAILS_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'PAYMENT_TERM_DETAILS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_299');
PROMPT Create new index PAYMENT_TERM_DETAILS_RK on PAYMENT_TERM_DETAILS_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'PAYMENT_TERM_DETAILS_TAB';
   index_name_  VARCHAR2(30)  := 'PAYMENT_TERM_DETAILS_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_300');
PROMPT Add Column ROWKEY to PAYMENT_VACATION_PERIOD_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'PAYMENT_VACATION_PERIOD_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_301');
PROMPT Create new index PAYMENT_VACATION_PERIOD_RK on PAYMENT_VACATION_PERIOD_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'PAYMENT_VACATION_PERIOD_TAB';
   index_name_  VARCHAR2(30)  := 'PAYMENT_VACATION_PERIOD_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_302');
PROMPT Add Column ROWKEY to TAX_BOOK_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TAX_BOOK_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_303');
PROMPT Create new index TAX_BOOK_RK on TAX_BOOK_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TAX_BOOK_TAB';
   index_name_  VARCHAR2(30)  := 'TAX_BOOK_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_304');
PROMPT Add Column ROWKEY to TAX_BOOK_STRUCTURE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TAX_BOOK_STRUCTURE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_305');
PROMPT Create new index TAX_BOOK_STRUCTURE_RK on TAX_BOOK_STRUCTURE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TAX_BOOK_STRUCTURE_TAB';
   index_name_  VARCHAR2(30)  := 'TAX_BOOK_STRUCTURE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_306');
PROMPT Add Column ROWKEY to TAX_BOOK_STRUCTURE_ITEM_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TAX_BOOK_STRUCTURE_ITEM_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_307');
PROMPT Create new index TAX_BOOK_STRUCTURE_ITEM_RK on TAX_BOOK_STRUCTURE_ITEM_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TAX_BOOK_STRUCTURE_ITEM_TAB';
   index_name_  VARCHAR2(30)  := 'TAX_BOOK_STRUCTURE_ITEM_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_308');
PROMPT Add Column ROWKEY to TAX_BOOK_STRUCTURE_LEVEL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TAX_BOOK_STRUCTURE_LEVEL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_309');
PROMPT Create new index TAX_BOOK_STRUCTURE_LEVEL_RK on TAX_BOOK_STRUCTURE_LEVEL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TAX_BOOK_STRUCTURE_LEVEL_TAB';
   index_name_  VARCHAR2(30)  := 'TAX_BOOK_STRUCTURE_LEVEL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_310');
PROMPT Add Column ROWKEY to TAX_CODE_TEXTS_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TAX_CODE_TEXTS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_311');
PROMPT Create new index TAX_CODE_TEXTS_RK on TAX_CODE_TEXTS_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TAX_CODE_TEXTS_TAB';
   index_name_  VARCHAR2(30)  := 'TAX_CODE_TEXTS_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_312');
PROMPT Add Column ROWKEY to EXT_FILE_FUNCTION_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_FUNCTION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_313');
PROMPT Create new index EXT_FILE_FUNCTION_RK on EXT_FILE_FUNCTION_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_FUNCTION_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_FUNCTION_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_314');
PROMPT Add Column ROWKEY to EXT_FILE_TEMPL_DET_FUNC_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'EXT_FILE_TEMPL_DET_FUNC_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_315');
PROMPT Create new index EXT_FILE_TEMPL_DET_FUNC_RK on EXT_FILE_TEMPL_DET_FUNC_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'EXT_FILE_TEMPL_DET_FUNC_TAB';
   index_name_  VARCHAR2(30)  := 'EXT_FILE_TEMPL_DET_FUNC_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_316');
PROMPT Add Column ROWKEY to TAX_LIABILITY_DATE_CTRL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TAX_LIABILITY_DATE_CTRL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_317');
PROMPT Create new index TAX_LIABILITY_DATE_CTRL_RK on TAX_LIABILITY_DATE_CTRL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TAX_LIABILITY_DATE_CTRL_TAB';
   index_name_  VARCHAR2(30)  := 'TAX_LIABILITY_DATE_CTRL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_318');
PROMPT Add Column ROWKEY to TAX_LIABLTY_DATE_EXCEPTION_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TAX_LIABLTY_DATE_EXCEPTION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_319');
PROMPT Create new index TAX_LIABLTY_DATE_EXCEPTION_RK on TAX_LIABLTY_DATE_EXCEPTION_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TAX_LIABLTY_DATE_EXCEPTION_TAB';
   index_name_  VARCHAR2(30)  := 'TAX_LIABLTY_DATE_EXCEPTION_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_320');
PROMPT Add Column ROWKEY to ACCOUNTING_ATTRIBUTE_CON_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_ATTRIBUTE_CON_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_321');
PROMPT  making COLUMN ATTRIBUTE_VALUE , NOT NULL in Accrul_Attribute_Tab
DECLARE
   column_          Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('ATTRIBUTE_VALUE', 'VARCHAR2(259)', 'N' );
   Database_SYS.Alter_Table_Column ('ACCRUL_ATTRIBUTE_TAB', 'M', column_ , TRUE);
END;          
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_322');
PROMPT Create new index ACCOUNTING_ATTRIBUTE_CON_RK on ACCOUNTING_ATTRIBUTE_CON_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_ATTRIBUTE_CON_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_ATTRIBUTE_CON_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_323');
PROMPT Add Column ROWKEY to ACCOUNTING_ATTRIBUTE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_ATTRIBUTE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_324');
PROMPT Create new index ACCOUNTING_ATTRIBUTE_RK on ACCOUNTING_ATTRIBUTE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_ATTRIBUTE_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_ATTRIBUTE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_325');
PROMPT Add Column ROWKEY to ACCOUNTING_ATTRIBUTE_VALUE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'ACCOUNTING_ATTRIBUTE_VALUE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_326');
PROMPT Create new index ACCOUNTING_ATTRIBUTE_VALUE_RK on ACCOUNTING_ATTRIBUTE_VALUE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'ACCOUNTING_ATTRIBUTE_VALUE_TAB';
   index_name_  VARCHAR2(30)  := 'ACCOUNTING_ATTRIBUTE_VALUE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_327');
PROMPT Add Column ROWKEY to PROJECT_COST_ELEMENT_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'PROJECT_COST_ELEMENT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_328');
PROMPT Create new index PROJECT_COST_ELEMENT_RK on PROJECT_COST_ELEMENT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'PROJECT_COST_ELEMENT_TAB';
   index_name_  VARCHAR2(30)  := 'PROJECT_COST_ELEMENT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_329');
PROMPT Add Column ROWKEY to COST_ELEMENT_TO_ACCOUNT_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'COST_ELEMENT_TO_ACCOUNT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_330');
PROMPT Create new index COST_ELEMENT_TO_ACCOUNT_RK on COST_ELEMENT_TO_ACCOUNT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'COST_ELEMENT_TO_ACCOUNT_TAB';
   index_name_  VARCHAR2(30)  := 'COST_ELEMENT_TO_ACCOUNT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_331');
PROMPT Add Column ROWKEY to PERIOD_ALLOCATION_RULE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'PERIOD_ALLOCATION_RULE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_332');
PROMPT Create new index PERIOD_ALLOCATION_RULE_RK on PERIOD_ALLOCATION_RULE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'PERIOD_ALLOCATION_RULE_TAB';
   index_name_  VARCHAR2(30)  := 'PERIOD_ALLOCATION_RULE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_333');
PROMPT Add Column ROWKEY to PERIOD_ALLOC_RULE_LINE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'PERIOD_ALLOC_RULE_LINE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_334');
PROMPT Create new index PERIOD_ALLOC_RULE_LINE_RK on PERIOD_ALLOC_RULE_LINE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'PERIOD_ALLOC_RULE_LINE_TAB';
   index_name_  VARCHAR2(30)  := 'PERIOD_ALLOC_RULE_LINE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_335');
PROMPT Add Column ROWKEY to COMB_RULE_ID_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'COMB_RULE_ID_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_336');
PROMPT Create new index COMB_RULE_ID_RK on COMB_RULE_ID_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'COMB_RULE_ID_TAB';
   index_name_  VARCHAR2(30)  := 'COMB_RULE_ID_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_337');
PROMPT Add Column ROWKEY to VOUCHER_NOTE_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'VOUCHER_NOTE_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_338');
PROMPT Create new index VOUCHER_NOTE_RK on VOUCHER_NOTE_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'VOUCHER_NOTE_TAB';
   index_name_  VARCHAR2(30)  := 'VOUCHER_NOTE_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_339');
PROMPT Add Column ROWKEY to FIN_OBJ_GRP_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_OBJ_GRP_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_340');
PROMPT Create new index FIN_OBJ_GRP_RK on FIN_OBJ_GRP_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_OBJ_GRP_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_OBJ_GRP_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_341');
PROMPT Add Column ROWKEY to FIN_OBJ_GRP_OBJECT_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_OBJ_GRP_OBJECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_342');
PROMPT Create new index FIN_OBJ_GRP_OBJECT_RK on FIN_OBJ_GRP_OBJECT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_OBJ_GRP_OBJECT_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_OBJ_GRP_OBJECT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_343');
PROMPT Add Column ROWKEY to FIN_OBJ_GRP_SEL_OBJECT_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_OBJ_GRP_SEL_OBJECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_344');
PROMPT Create new index FIN_OBJ_GRP_SEL_OBJECT_RK on FIN_OBJ_GRP_SEL_OBJECT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_OBJ_GRP_SEL_OBJECT_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_OBJ_GRP_SEL_OBJECT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_345');
PROMPT Add Column ROWKEY to FIN_OBJECT_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_OBJECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_346');
PROMPT Create new index FIN_OBJECT_RK on FIN_OBJECT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_OBJECT_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_OBJECT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_347');
PROMPT Add Column ROWKEY to FIN_SEL_OBJ_TEMPL_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_SEL_OBJ_TEMPL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_348');
PROMPT Create new index FIN_SEL_OBJ_TEMPL_RK on FIN_SEL_OBJ_TEMPL_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_SEL_OBJ_TEMPL_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_SEL_OBJ_TEMPL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_349');
PROMPT Add Column ROWKEY to FIN_SEL_OBJ_TEMPL_DET_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_SEL_OBJ_TEMPL_DET_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_350');
PROMPT Create new index FIN_SEL_OBJ_TEMPL_DET_RK on FIN_SEL_OBJ_TEMPL_DET_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_SEL_OBJ_TEMPL_DET_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_SEL_OBJ_TEMPL_DET_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_351');
PROMPT Add Column ROWKEY to FIN_SEL_OBJECT_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_SEL_OBJECT_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_352');
PROMPT Create new index FIN_SEL_OBJECT_RK on FIN_SEL_OBJECT_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_SEL_OBJECT_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_SEL_OBJECT_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_353');
PROMPT Add Column ROWKEY to FIN_SEL_OBJECT_ALLOW_OPER_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_SEL_OBJECT_ALLOW_OPER_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_354');
PROMPT Create new index FIN_SEL_OBJECT_ALLOW_OPER_RK on FIN_SEL_OBJECT_ALLOW_OPER_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_SEL_OBJECT_ALLOW_OPER_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_SEL_OBJECT_ALLOW_OPER_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_355');
PROMPT Add Column ROWKEY to FIN_SEL_TEMPL_VALUES_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_SEL_TEMPL_VALUES_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_356');
PROMPT Create new index FIN_SEL_TEMPL_VALUES_RK on FIN_SEL_TEMPL_VALUES_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_SEL_TEMPL_VALUES_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_SEL_TEMPL_VALUES_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_357');
PROMPT Add Column ROWKEY to FIN_OBJECT_SELECTION_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_OBJECT_SELECTION_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_358');
PROMPT Create new index FIN_OBJECT_SELECTION_RK on FIN_OBJECT_SELECTION_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_OBJECT_SELECTION_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_OBJECT_SELECTION_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_359');
PROMPT Add Column ROWKEY to FIN_OBJ_SELECTION_VALUES_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'FIN_OBJ_SELECTION_VALUES_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_360');
PROMPT Create new index FIN_OBJ_SELECTION_VALUES_RK on FIN_OBJ_SELECTION_VALUES_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'FIN_OBJ_SELECTION_VALUES_TAB';
   index_name_  VARCHAR2(30)  := 'FIN_OBJ_SELECTION_VALUES_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_361');
PROMPT Add Column ROWKEY to CURRENCY_TYPE_BASIC_DATA_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'CURRENCY_TYPE_BASIC_DATA_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_362');
PROMPT Create new index CURRENCY_TYPE_BASIC_DATA_RK on CURRENCY_TYPE_BASIC_DATA.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'CURRENCY_TYPE_BASIC_DATA_TAB';
   index_name_  VARCHAR2(30)  := 'CURRENCY_TYPE_BASIC_DATA_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_363');
PROMPT Add Column ROWKEY to TAX_CODE_PER_TAX_BOOK_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TAX_CODE_PER_TAX_BOOK_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_364');
PROMPT Create new index TAX_CODE_PER_TAX_BOOK_RK on TAX_CODE_PER_TAX_BOOK_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TAX_CODE_PER_TAX_BOOK_TAB';
   index_name_  VARCHAR2(30)  := 'TAX_CODE_PER_TAX_BOOK_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_365');
PROMPT Add Column ROWKEY to TAX_CLASS_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TAX_CLASS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_366');
PROMPT Create new index TAX_CLASS_RK on TAX_CLASS_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TAX_CLASS_TAB';
   index_name_  VARCHAR2(30)  := 'TAX_CLASS_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_367');
PROMPT Add Column ROWKEY to TAX_CODES_PER_TAX_CLASS_TAB.
DECLARE
   columns_       Database_SYS.ColumnTabType;
   table_name_    VARCHAR2(30) := 'TAX_CODES_PER_TAX_CLASS_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$', NULL);
   Database_SYS.Alter_Table(table_name_, columns_);
END;
/
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_368');
PROMPT Create new index TAX_CODES_PER_TAX_CLASS_RK on TAX_CODES_PER_TAX_CLASS_TAB.
DECLARE
   columns_     Database_SYS.ColumnTabType;
   table_name_  VARCHAR2(30)  := 'TAX_CODES_PER_TAX_CLASS_TAB';
   index_name_  VARCHAR2(30)  := 'TAX_CODES_PER_TAX_CLASS_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** Custom Fields Upgrade Section End *****

---------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------

-- ***** Posting control related updates! Start *****

---------------------------------------------------------------------------------------------

-- ***** Posting_Ctrl_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_369');
PROMPT Removed Posting Control with Posting Type T50,T51,T53,T54 and Control Type AC2, C58 and Code Part A 

DELETE FROM POSTING_CTRL_TAB
WHERE posting_type IN ('T50','T51','T53','T54')
AND control_type IN ( 'AC2','C58')
AND code_part = 'A';
COMMIT;

-- ***** Posting_Ctrl_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** POSTING_CTRL_DETAIL_TAB Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_370');
PROMPT Add NO_CODE_PART_VALUE column to POSTING_CTRL_DETAIL_TAB
DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('NO_CODE_PART_VALUE', 'VARCHAR2(20)', 'Y' );
   Database_SYS.Alter_Table_Column ( 'POSTING_CTRL_DETAIL_TAB', 'A', column_ , TRUE );
END;
/

UPDATE POSTING_CTRL_DETAIL_TAB
   SET NO_CODE_PART_VALUE = 'FALSE'
   WHERE NO_CODE_PART_VALUE IS NULL;
COMMIT;

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   -- Make the NO_CODE_PART_VALUE column mandatory
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NO_CODE_PART_VALUE', 'VARCHAR2(20)', 'N' );
   Database_SYS.Alter_Table_Column ( 'POSTING_CTRL_DETAIL_TAB', 'M', column_ , TRUE );
END;
/

-- ***** POSTING_CTRL_DETAIL_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** Posting_Ctrl_Allowed_Comb_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_371');
PROMPT To remove duplicated posting control combination lines for IP13 and IP14   
DELETE 
   FROM   POSTING_CTRL_ALLOWED_COMB_TAB
   WHERE  control_type = 'AC8'
   AND    posting_type IN ( 'IP13','IP14' )  
   AND    code_part   != '*'
   AND    module       = 'ACCRUL' ;
COMMIT;
/
-- ***** Posting_Ctrl_Allowed_Comb_Tab End *****

---------------------------------------------------------------------------------------------

-- ***** POSTING_CTRL_DETAIL_SPEC_TAB Start *****
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_372');
PROMPT Add NO_CODE_PART_VALUE column to POSTING_CTRL_DETAIL_SPEC_TAB
DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('NO_CODE_PART_VALUE', 'VARCHAR2(20)', 'Y' );
   Database_SYS.Alter_Table_Column ( 'POSTING_CTRL_DETAIL_SPEC_TAB', 'A', column_ , TRUE );
END;
/

UPDATE POSTING_CTRL_DETAIL_SPEC_TAB
   SET NO_CODE_PART_VALUE = 'FALSE'
   WHERE NO_CODE_PART_VALUE IS NULL;
COMMIT;

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   -- Make the NO_CODE_PART_VALUE column in POSTING_CTRL_DETAIL_SPEC_TAB mandatory
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NO_CODE_PART_VALUE', 'VARCHAR2(20)', 'N' );
   Database_SYS.Alter_Table_Column ( 'POSTING_CTRL_DETAIL_SPEC_TAB', 'M', column_ , TRUE );
END;
/
-- ***** POSTING_CTRL_DETAIL_SPEC_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** POSTING_CTRL_COMB_DETAIL_TAB Start *****
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_373');
PROMPT Add NO_CODE_PART_VALUE COLUMN TO POSTING_CTRL_COMB_DETAIL_TAB
DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('NO_CODE_PART_VALUE', 'VARCHAR2(20)', 'Y' );
   Database_SYS.Alter_Table_Column ( 'POSTING_CTRL_COMB_DETAIL_TAB', 'A', column_ , TRUE );
END;
/

UPDATE POSTING_CTRL_COMB_DETAIL_TAB
   SET NO_CODE_PART_VALUE = 'FALSE'
   WHERE NO_CODE_PART_VALUE IS NULL;

COMMIT;

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   -- Make the NO_CODE_PART_VALUE column in POSTING_CTRL_COMB_DETAIL_TAB mandatory
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NO_CODE_PART_VALUE', 'VARCHAR2(20)', 'N' );
   Database_SYS.Alter_Table_Column ( 'POSTING_CTRL_COMB_DETAIL_TAB', 'M', column_ , TRUE );
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_374');
PROMPT set code_part_value to nullable in POSTING_CTRL_COMB_DETAIL_TAB
DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CODE_PART_VALUE', 'VARCHAR2(20)', 'Y' );
   Database_SYS.Alter_Table_Column ( 'POSTING_CTRL_COMB_DETAIL_TAB', 'M', column_ , TRUE );
END;
/

-- ***** POSTING_CTRL_COMB_DETAIL_TAB End *****

---------------------------------------------------------------------------------------------

-- ***** POSTING_CTRL_COMB_DET_SPEC_TAB Start *****
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_375');
PROMPT Add NO_CODE_PART_VALUE column to POSTING_CTRL_COMB_DET_SPEC_TAB
DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('NO_CODE_PART_VALUE', 'VARCHAR2(20)', 'Y' );
   Database_SYS.Alter_Table_Column ( 'POSTING_CTRL_COMB_DET_SPEC_TAB', 'A', column_ , TRUE );
END;
/

UPDATE POSTING_CTRL_COMB_DET_SPEC_TAB
   SET NO_CODE_PART_VALUE = 'FALSE'
   WHERE NO_CODE_PART_VALUE IS NULL;

COMMIT;

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   -- Make the NO_CODE_PART_VALUE column to POSTING_CTRL_COMB_DET_SPEC_TAB mandatory
   Database_SYS.Reset_Column(column_);
   column_ := Database_SYS.Set_Column_Values('NO_CODE_PART_VALUE', 'VARCHAR2(20)', 'N' );
   Database_SYS.Alter_Table_Column ( 'POSTING_CTRL_COMB_DET_SPEC_TAB', 'M', column_ , TRUE );
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_376');
PROMPT set code_part_value to nullable in POSTING_CTRL_COMB_DET_SPEC_TAB
DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('CODE_PART_VALUE', 'VARCHAR2(20)', 'Y' );
   Database_SYS.Alter_Table_Column ( 'POSTING_CTRL_COMB_DET_SPEC_TAB', 'M', column_ , TRUE );
END;
/

-- ***** POSTING_CTRL_COMB_DET_SPEC_TAB End *****

---------------------------------------------------------------------------------------------

-- ****************  Inserting new posting_type to posting_ctrl_tab,posting_ctrl_detail_tab, comb_control_type_tab, posting_ctrl_detail_spec_tab, posting_ctrl_comb_detail_tab, posting_ctrl_comb_det_spec_tab Start ************

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_377');
PROMPT Inserting new posting_type in to posting_ctrl_tab,posting_ctrl_detail_tab, comb_control_type_tab, posting_ctrl_detail_spec_tab, posting_ctrl_comb_detail_tab and posting_ctrl_comb_det_spec_tab

DECLARE
   insert_posting_type_   VARCHAR2(10);   

   CURSOR get_posting_ctrl_data IS
      SELECT * 
      FROM   POSTING_CTRL_TAB 
      WHERE  posting_type IN ('FAP7','FAP11','FAP19','FAP13','FAP14','FAP15','FAP3','FAP4');
      
  CURSOR get_post_ctrl_details IS
     SELECT * 
     FROM   POSTING_CTRL_DETAIL_TAB
     WHERE  posting_type IN ('FAP7','FAP11','FAP19','FAP13','FAP14','FAP15','FAP3','FAP4');
     
   CURSOR get_comb_control_type IS
      SELECT * 
      FROM   COMB_CONTROL_TYPE_TAB
      WHERE  posting_type IN ('FAP7','FAP11','FAP19','FAP13','FAP14','FAP15','FAP3','FAP4');

   CURSOR get_posting_ctrl_detail_spec IS
      SELECT * 
      FROM   POSTING_CTRL_DETAIL_SPEC_TAB
      WHERE  posting_type IN ('FAP7','FAP11','FAP19','FAP13','FAP14','FAP15','FAP3','FAP4');

   CURSOR get_posting_ctrl_comb_detail IS
      SELECT * 
      FROM   POSTING_CTRL_COMB_DETAIL_TAB
      WHERE  posting_type IN ('FAP7','FAP11','FAP19','FAP13','FAP14','FAP15','FAP3','FAP4');

   CURSOR    posting_ctrl_comb_det_spec IS
      SELECT * 
      FROM   POSTING_CTRL_COMB_DET_SPEC_TAB
      WHERE  posting_type IN ('FAP7','FAP11','FAP19','FAP13','FAP14','FAP15','FAP3','FAP4');

      
   temp_posting_rec_   POSTING_CTRL_TAB%ROWTYPE;
   temp_posting_rec1_  POSTING_CTRL_DETAIL_TAB%ROWTYPE;
   temp_posting_rec2_  COMB_CONTROL_TYPE_TAB%ROWTYPE;
   temp_posting_rec3_  POSTING_CTRL_DETAIL_SPEC_TAB%ROWTYPE;
   temp_posting_rec4_  POSTING_CTRL_COMB_DETAIL_TAB%ROWTYPE;
   temp_posting_rec5_  POSTING_CTRL_COMB_DET_SPEC_TAB%ROWTYPE;
  
   FUNCTION Get_Posting_Type 
     (current_posting_type IN VARCHAR2) RETURN VARCHAR2 
   IS
      posting_type_ POSTING_CTRL_TAB.Posting_Type%TYPE;
   BEGIN
      CASE current_posting_type 
         WHEN 'FAP7'  THEN 
            posting_type_ := 'FAP25';
         WHEN 'FAP11' THEN 
            posting_type_ := 'FAP26';
         WHEN 'FAP19' THEN 
            posting_type_ := 'FAP27';
         WHEN 'FAP13' THEN 
            posting_type_ := 'FAP28';
         WHEN 'FAP14' THEN 
            posting_type_ := 'FAP29';
         WHEN 'FAP15' THEN 
            posting_type_ := 'FAP30';
         WHEN 'FAP3'  THEN 
            posting_type_ := 'FAP31';
         WHEN 'FAP4'  THEN 
            posting_type_ := 'FAP32';
         ELSE              
            posting_type_ := NULL;
         END CASE;
      RETURN posting_type_;
   END Get_Posting_Type; 
  
   FUNCTION Posting_Type_Exist (
      company_      IN VARCHAR2,
      posting_type_ IN VARCHAR2 ) RETURN BOOLEAN
   IS
      dummy_ NUMBER;
      CURSOR exist_control IS
         SELECT 1
         FROM   POSTING_CTRL_TAB
         WHERE  company = company_
         AND    posting_type = posting_type_;
   BEGIN
      OPEN exist_control;
      FETCH exist_control INTO dummy_;
      IF (exist_control%FOUND) THEN
         CLOSE exist_control;
         RETURN(TRUE);
      END IF;
      CLOSE exist_control;
      RETURN(FALSE);
   END Posting_Type_Exist;
   
   PROCEDURE Insert_Posting_Ctrl_Data( 
      posting_rec_  IN POSTING_CTRL_TAB%ROWTYPE)
   IS
   BEGIN      
      IF(NOT Posting_Type_Exist(posting_rec_.company, posting_rec_.posting_type)) THEN
         INSERT
            INTO posting_ctrl_tab (
               company,
               code_part,
               posting_type,
               pc_valid_from,
               control_type,
               module,
               override,
               default_value,
               default_value_no_ct,
               ctrl_type_category,
               rowversion)
            VALUES (
               posting_rec_.company,
               posting_rec_.code_part,
               posting_rec_.posting_type,
               posting_rec_.pc_valid_from,
               posting_rec_.control_type,
               posting_rec_.module,
               posting_rec_.override,
               posting_rec_.default_value,
               posting_rec_.default_value_no_ct,
               posting_rec_.ctrl_type_category,
               posting_rec_.rowversion);
      END IF;
   EXCEPTION
      WHEN dup_val_on_index THEN 
         NULL;
      WHEN OTHERS THEN
         RAISE;
   END Insert_Posting_Ctrl_Data;


   PROCEDURE Insert_Post_Ctl_Detail_Data( 
      posting_rec_  IN POSTING_CTRL_DETAIL_TAB%ROWTYPE)
   IS
   BEGIN
      IF(NOT Posting_Type_Exist(posting_rec_.company, posting_rec_.posting_type)) THEN
         INSERT
            INTO posting_ctrl_detail_tab (
                 company,
                 code_part,
                 posting_type,
                 pc_valid_from,
                 code_part_value,
                 control_type_value,
                 valid_from,
                 control_type,
                 module,
                 spec_control_type,
                 spec_module,
                 spec_ctrl_type_category,
                 spec_default_value,
                 spec_default_value_no_ct,
                 no_code_part_value,
                 rowversion)
            VALUES (
                 posting_rec_.company,
                 posting_rec_.code_part,
                 posting_rec_.posting_type,
                 posting_rec_.pc_valid_from,
                 posting_rec_.code_part_value,
                 posting_rec_.control_type_value,
                 posting_rec_.valid_from,
                 posting_rec_.control_type,
                 posting_rec_.module,
                 posting_rec_.spec_control_type,
                 posting_rec_.spec_module,
                 posting_rec_.spec_ctrl_type_category,
                 posting_rec_.spec_default_value,
                 posting_rec_.spec_default_value_no_ct,
                 posting_rec_.no_code_part_value,
                 posting_rec_.rowversion);
      END IF;  
   EXCEPTION
      WHEN dup_val_on_index THEN 
         NULL;
      WHEN OTHERS THEN
         RAISE;
   END Insert_Post_Ctl_Detail_Data; 



   PROCEDURE Insert_Comb_Ctl_Data( 
      posting_rec_  IN COMB_CONTROL_TYPE_TAB%ROWTYPE)
   IS
   BEGIN
      IF(NOT Posting_Type_Exist(posting_rec_.company, posting_rec_.posting_type)) THEN
         INSERT
            INTO comb_control_type_tab (
                 posting_type,
                 company,
                 comb_control_type,
                 comb_control_type_desc,
                 comb_module,
                 control_type1,
                 module1,
                 control_type2,
                 module2,
                 rowversion)
            VALUES (
                 posting_rec_.posting_type,
                 posting_rec_.company,
                 posting_rec_.comb_control_type,
                 posting_rec_.comb_control_type_desc,
                 posting_rec_.comb_module,
                 posting_rec_.control_type1,
                 posting_rec_.module1,
                 posting_rec_.control_type2,
                 posting_rec_.module2,
                 posting_rec_.rowversion);
      END IF;
   EXCEPTION
      WHEN dup_val_on_index THEN 
         NULL;
      WHEN OTHERS THEN
         RAISE;
   END Insert_Comb_Ctl_Data;  



   PROCEDURE Insert_Post_Ctl_Detail( 
      posting_rec_  IN POSTING_CTRL_DETAIL_SPEC_TAB%ROWTYPE)
   IS
   BEGIN
      IF(NOT Posting_Type_Exist(posting_rec_.company, posting_rec_.posting_type)) THEN
         INSERT
            INTO posting_ctrl_detail_spec_tab (
               company,
               code_part,
               pc_valid_from,
               posting_type,
               control_type_value,
               valid_from,
               spec_control_type_value,
               spec_control_type,
               spec_module,
               code_part_value,
               no_code_part_value,
               rowversion)
            VALUES (
               posting_rec_.company,
               posting_rec_.code_part,
               posting_rec_.pc_valid_from,
               posting_rec_.posting_type,
               posting_rec_.control_type_value,
               posting_rec_.valid_from,
               posting_rec_.spec_control_type_value,
               posting_rec_.spec_control_type,
               posting_rec_.spec_module,
               posting_rec_.code_part_value,
               posting_rec_.no_code_part_value,
               posting_rec_.rowversion);
      END IF;
   EXCEPTION
      WHEN dup_val_on_index THEN 
         NULL;
      WHEN OTHERS THEN
         RAISE;
   END Insert_Post_Ctl_Detail;  


   PROCEDURE Insert_Post_Comb_Detail( 
      posting_rec_  IN POSTING_CTRL_COMB_DETAIL_TAB%ROWTYPE)
   IS
   BEGIN
      IF(NOT Posting_Type_Exist(posting_rec_.company, posting_rec_.posting_type)) THEN
         INSERT
            INTO posting_ctrl_comb_detail_tab (
               company,
               posting_type,
               pc_valid_from,
               comb_control_type,
               control_type1,
               control_type1_value,
               control_type2,
               control_type2_value,
               comb_module,
               module1,
               module2,
               code_part,
               code_part_name,
               code_part_value,
               valid_from,
               no_code_part_value,
               rowversion)
            VALUES (
               posting_rec_.company,
               posting_rec_.posting_type,
               posting_rec_.pc_valid_from,
               posting_rec_.comb_control_type,
               posting_rec_.control_type1,
               posting_rec_.control_type1_value,
               posting_rec_.control_type2,
               posting_rec_.control_type2_value,
               posting_rec_.comb_module,
               posting_rec_.module1,
               posting_rec_.module2,
               posting_rec_.code_part,
               posting_rec_.code_part_name,
               posting_rec_.code_part_value,
               posting_rec_.valid_from,
               posting_rec_.no_code_part_value,
               posting_rec_.rowversion);
      END IF;
   EXCEPTION
      WHEN dup_val_on_index THEN 
         NULL;
      WHEN OTHERS THEN
         RAISE;
   END Insert_Post_Comb_Detail; 



   PROCEDURE Insert_Post_Combdet_Detail( 
      posting_rec_  IN POSTING_CTRL_COMB_DET_SPEC_TAB%ROWTYPE)
   IS
   BEGIN
      IF(NOT Posting_Type_Exist(posting_rec_.company, posting_rec_.posting_type)) THEN
         INSERT
            INTO posting_ctrl_comb_det_spec_tab (
               company,
               code_part,
               pc_valid_from,
               posting_type,
               control_type_value,
               valid_from,
               spec_comb_control_type,
               spec_control_type1_value,
               spec_control_type2_value,
               spec_control_type1,
               spec_module1,
               spec_control_type2,
               spec_module2,
               code_part_value,
               no_code_part_value,
               rowversion)
            VALUES (
               posting_rec_.company,
               posting_rec_.code_part,
               posting_rec_.pc_valid_from,
               posting_rec_.posting_type,
               posting_rec_.control_type_value,
               posting_rec_.valid_from,
               posting_rec_.spec_comb_control_type,
               posting_rec_.spec_control_type1_value,
               posting_rec_.spec_control_type2_value,
               posting_rec_.spec_control_type1,
               posting_rec_.spec_module1,
               posting_rec_.spec_control_type2,
               posting_rec_.spec_module2,
               posting_rec_.code_part_value,
               posting_rec_.no_code_part_value,
               posting_rec_.rowversion);
      END IF;
   EXCEPTION
      WHEN dup_val_on_index THEN 
         NULL;
      WHEN OTHERS THEN
         RAISE;
   END Insert_Post_Combdet_Detail; 


   
BEGIN
   DBMS_OUTPUT.PUT_LINE('Insert new posting type records into posting_ctrl_tab:');
   FOR rec_ IN get_posting_ctrl_data LOOP
      temp_posting_rec_ := rec_;        
      temp_posting_rec_.posting_type := Get_Posting_Type(rec_.posting_type);
      IF (temp_posting_rec_.posting_type IS NOT NULL) THEN
         temp_posting_rec_.Rowversion := SYSDATE;
         Insert_Posting_Ctrl_Data(temp_posting_rec_);
         IF (rec_.posting_type  = 'FAP3') THEN
            temp_posting_rec_.posting_type := 'FAP33';
            temp_posting_rec_.Rowversion := SYSDATE;
            Insert_Posting_Ctrl_Data(temp_posting_rec_);
         END IF;
         IF (rec_.posting_type  = 'FAP4') THEN
            temp_posting_rec_.posting_type := 'FAP34';
            temp_posting_rec_.Rowversion := SYSDATE;
            Insert_Posting_Ctrl_Data(temp_posting_rec_);
         END IF;
      END IF;
   END LOOP;

   DBMS_OUTPUT.PUT_LINE('Insert new posting type records into posting_ctrl_Detail_tab:');
   FOR rec_ IN get_post_ctrl_details LOOP
      temp_posting_rec1_ := rec_;        
      temp_posting_rec1_.posting_type := Get_Posting_Type(rec_.posting_type);
      IF (temp_posting_rec1_.posting_type IS NOT NULL) THEN
         temp_posting_rec1_.Rowversion := SYSDATE;
         Insert_Post_Ctl_Detail_Data(temp_posting_rec1_);
         IF (rec_.posting_type  = 'FAP3') THEN
            temp_posting_rec1_.posting_type := 'FAP33';
            temp_posting_rec1_.Rowversion := SYSDATE;
            Insert_Post_Ctl_Detail_Data(temp_posting_rec1_);
         END IF;
         IF (rec_.posting_type  = 'FAP4') THEN
            temp_posting_rec1_.posting_type := 'FAP34';
            temp_posting_rec1_.Rowversion := SYSDATE;
            Insert_Post_Ctl_Detail_Data(temp_posting_rec1_);
         END IF;
      END IF;
   END LOOP;

   DBMS_OUTPUT.PUT_LINE('Insert new posting type records into comb_control_type_tab:');
   FOR rec_ IN get_comb_control_type LOOP
      temp_posting_rec2_ := rec_;        
      temp_posting_rec2_.posting_type := Get_Posting_Type(rec_.posting_type);
      IF (temp_posting_rec2_.posting_type IS NOT NULL) THEN
         temp_posting_rec2_.Rowversion := SYSDATE;
         Insert_Comb_Ctl_Data(temp_posting_rec2_);
         IF (rec_.posting_type  = 'FAP3') THEN
            temp_posting_rec2_.posting_type := 'FAP33';
            temp_posting_rec2_.Rowversion := SYSDATE;
            Insert_Comb_Ctl_Data(temp_posting_rec2_);
         END IF;
         IF (rec_.posting_type  = 'FAP4') THEN
            temp_posting_rec2_.posting_type := 'FAP34';
            temp_posting_rec2_.Rowversion := SYSDATE;
            Insert_Comb_Ctl_Data(temp_posting_rec2_);
         END IF;
      END IF;
   END LOOP;

   DBMS_OUTPUT.PUT_LINE('Insert new posting type records into posting_ctrl_detail_spec_tab:');
   FOR rec_ IN get_posting_ctrl_detail_spec LOOP
      temp_posting_rec3_ := rec_;        
      temp_posting_rec3_.posting_type := Get_Posting_Type(rec_.posting_type);
      IF (temp_posting_rec3_.posting_type IS NOT NULL) THEN
         temp_posting_rec3_.Rowversion := SYSDATE;
         Insert_Post_Ctl_Detail(temp_posting_rec3_);
         IF (rec_.posting_type  = 'FAP3') THEN
            temp_posting_rec3_.posting_type := 'FAP33';
            temp_posting_rec3_.Rowversion := SYSDATE;
            Insert_Post_Ctl_Detail(temp_posting_rec3_);
         END IF;
         IF (rec_.posting_type  = 'FAP4') THEN
            temp_posting_rec3_.posting_type := 'FAP34';
            temp_posting_rec3_.Rowversion := SYSDATE;
            Insert_Post_Ctl_Detail(temp_posting_rec3_);
         END IF;
      END IF;
   END LOOP;

   DBMS_OUTPUT.PUT_LINE('Insert new posting type records into posting_ctrl_comb_detail_tab:');
   FOR rec_ IN get_posting_ctrl_comb_detail LOOP
      temp_posting_rec4_ := rec_;        
      temp_posting_rec4_.posting_type := Get_Posting_Type(rec_.posting_type);
      IF (temp_posting_rec4_.posting_type IS NOT NULL) THEN
         temp_posting_rec4_.Rowversion := SYSDATE;
         Insert_Post_Comb_Detail(temp_posting_rec4_);
         IF (rec_.posting_type  = 'FAP3') THEN
            temp_posting_rec4_.posting_type := 'FAP33';
            temp_posting_rec4_.Rowversion := SYSDATE;
            Insert_Post_Comb_Detail(temp_posting_rec4_);
         END IF;
         IF (rec_.posting_type  = 'FAP4') THEN
            temp_posting_rec4_.posting_type := 'FAP34';
            temp_posting_rec4_.Rowversion := SYSDATE;
            Insert_Post_Comb_Detail(temp_posting_rec4_);
         END IF;
      END IF;
   END LOOP;

   DBMS_OUTPUT.PUT_LINE('Insert new posting type records into posting_ctrl_comb_det_spec_tab:');
   FOR rec_ IN posting_ctrl_comb_det_spec LOOP
      temp_posting_rec5_ := rec_;        
      temp_posting_rec5_.posting_type := Get_Posting_Type(rec_.posting_type);
      IF (temp_posting_rec5_.posting_type IS NOT NULL) THEN
         temp_posting_rec5_.Rowversion := SYSDATE;
         Insert_Post_Combdet_Detail(temp_posting_rec5_);
         IF (rec_.posting_type  = 'FAP3') THEN
            temp_posting_rec5_.posting_type := 'FAP33';
            temp_posting_rec5_.Rowversion := SYSDATE;
            Insert_Post_Combdet_Detail(temp_posting_rec5_);
         END IF;
         IF (rec_.posting_type  = 'FAP4') THEN
            temp_posting_rec5_.posting_type := 'FAP34';
            temp_posting_rec5_.Rowversion := SYSDATE;
            Insert_Post_Combdet_Detail(temp_posting_rec5_);
         END IF;
      END IF;
   END LOOP;

   COMMIT;
END;
/

-- ****************  Inserting new posting_type to posting_ctrl_tab,posting_ctrl_detail_tab, comb_control_type_tab, posting_ctrl_detail_spec_tab, posting_ctrl_comb_detail_tab, posting_ctrl_comb_det_spec_tab End ************

---------------------------------------------------------------------------------------------


-- ***** Posting control related updates! End *****
----------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------

-- ***** Finance_Doc_Reg_Tab Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_378');
PROMPT Remove IdentityPayInfo AND PostingPropInvUtil lu FROM finance_doc_reg_tab
BEGIN
   DELETE FROM finance_doc_reg_tab
      WHERE LU IN ( 'IdentityPayInfo','PostingPropInvUtil');
END;
/
COMMIT;

-- ***** Finance_Doc_Reg_Tab End *****


-- ***** Pseudo_Codes_Tab  Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_379');
PROMPT  Increased length of PSEUDO_CODE COLUMN to 20 in Pseudo_Codes_Tab 
DECLARE
    column_    Database_SYS.ColRec ;
BEGIN
   column_ := Database_SYS.Set_Column_Values('PSEUDO_CODE', 'VARCHAR2(20)');
   Database_SYS.Alter_Table_Column ( 'PSEUDO_CODES_TAB', 'M', column_ , TRUE );
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_380');
PROMPT Add Column project_activity_id to PSEUDO_CODES_TAB

DECLARE
   column_      Database_SYS.ColRec;
BEGIN
   column_ := Database_SYS.Set_Column_Values('project_activity_id', 'NUMBER', 'Y' );
   Database_SYS.Alter_Table_Column ( 'PSEUDO_CODES_TAB', 'A', column_ , TRUE );
END;
/
-- ***** Pseudo_Codes_Tab End *****


-- ***** RPD_IDENTITY_TAB Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_381');
PROMPT CREATE TABLE RPD_IDENTITY_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'RPD_IDENTITY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'DESCRIPTION', 'VARCHAR2(200)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_382');
PROMPT CREATE INDICES RPD_IDENTITY_PK, RPD_IDENTITY_RK ON RPD_IDENTITY_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RPD_IDENTITY_TAB';
   index_name_ VARCHAR2(30) := 'RPD_IDENTITY_PK';
   rkidx_name_ VARCHAR2(30) := 'RPD_IDENTITY_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/
-- ***** RPD_IDENTITY_TAB End *****

-- ***** RPD_YEAR_TAB Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_383');
PROMPT CREATE TABLE RPD_YEAR_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'RPD_YEAR_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RPD_YEAR', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_384');
PROMPT CREATE INDICES RPD_YEAR_PK, RPD_YEAR_RK ON RPD_YEAR_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RPD_YEAR_TAB';
   index_name_ VARCHAR2(30) := 'RPD_YEAR_PK';
   rkidx_name_ VARCHAR2(30) := 'RPD_YEAR_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID');
   Database_SYS.Set_Table_Column(columns_, 'RPD_YEAR');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** RPD_YEAR_TAB End *****

-- ***** RPD_PERIOD_TAB Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_385');
PROMPT CREATE TABLE RPD_PERIOD_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'RPD_PERIOD_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RPD_YEAR', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RPD_PERIOD', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'FROM_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'UNTIL_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'YEAR_PERIOD_NUM', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'YEAR_PERIOD_STR', 'VARCHAR2(10)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'STRING_ATTRIBUTE1', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STRING_ATTRIBUTE2', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STRING_ATTRIBUTE3', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STRING_ATTRIBUTE4', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'STRING_ATTRIBUTE5', 'VARCHAR2(100)', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NUMBER_ATTRIBUTE1', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NUMBER_ATTRIBUTE2', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NUMBER_ATTRIBUTE3', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NUMBER_ATTRIBUTE4', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'NUMBER_ATTRIBUTE5', 'NUMBER', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_386');
PROMPT CREATE INDICES RPD_PERIOD_PK, RPD_PERIOD_RK ON RPD_PERIOD_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RPD_PERIOD_TAB';
   index_name_ VARCHAR2(30) := 'RPD_PERIOD_PK';
   rkidx_name_ VARCHAR2(30) := 'RPD_PERIOD_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID');
   Database_SYS.Set_Table_Column(columns_, 'RPD_YEAR');
   Database_SYS.Set_Table_Column(columns_, 'RPD_PERIOD');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** RPD_PERIOD_TAB End *****

-- ***** RPD_PERIOD_DETAIL_TAB Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_387');
PROMPT CREATE TABLE RPD_PERIOD_DETAIL_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'RPD_PERIOD_DETAIL_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RPD_YEAR', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RPD_PERIOD', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REPORTING_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_388');
PROMPT CREATE INDEX RPD_PERIOD_DETAIL_UX1 ON RPD_PERIOD_DETAIL_TAB
DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RPD_PERIOD_DETAIL_TAB';
   index_name_ VARCHAR2(30) := 'RPD_PERIOD_DETAIL_UX1';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID');
   Database_SYS.Set_Table_Column(columns_, 'REPORTING_DATE');   
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/



exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_389');
PROMPT CREATE INDICES RPD_PERIOD_DETAIL_PK, RPD_PERIOD_DETAIL_RK ON RPD_PERIOD_DETAIL_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RPD_PERIOD_DETAIL_TAB';
   index_name_ VARCHAR2(30) := 'RPD_PERIOD_DETAIL_PK';
   rkidx_name_ VARCHAR2(30) := 'RPD_PERIOD_DETAIL_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID');
   Database_SYS.Set_Table_Column(columns_, 'RPD_YEAR');
   Database_SYS.Set_Table_Column(columns_, 'RPD_PERIOD');
   Database_SYS.Set_Table_Column(columns_, 'REPORTING_DATE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** RPD_PERIOD_DETAIL_TAB End *****

-- ***** RPD_COMPANY_TAB Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_390');
PROMPT CREATE TABLE RPD_COMPANY_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'RPD_COMPANY_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_391');
PROMPT CREATE INDICES RPD_COMPANY_PK, RPD_COMPANY_RK ON RPD_COMPANY_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RPD_COMPANY_TAB';
   index_name_ VARCHAR2(30) := 'RPD_COMPANY_PK';
   rkidx_name_ VARCHAR2(30) := 'RPD_COMPANY_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** RPD_COMPANY_TAB End *****

-- ***** RPD_COMPANY_PERIOD_TAB Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_392');
PROMPT CREATE TABLE RPD_COMPANY_PERIOD_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'RPD_COMPANY_PERIOD_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RPD_YEAR', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RPD_PERIOD', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_YEAR', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_PERIOD', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_393');
PROMPT CREATE INDICES RPD_COMPANY_PERIOD_PK, RPD_COMPANY_PERIOD_RK ON RPD_COMPANY_PERIOD_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RPD_COMPANY_PERIOD_TAB';
   index_name_ VARCHAR2(30) := 'RPD_COMPANY_PERIOD_PK';
   rkidx_name_ VARCHAR2(30) := 'RPD_COMPANY_PERIOD_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'RPD_YEAR');
   Database_SYS.Set_Table_Column(columns_, 'RPD_PERIOD');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_YEAR');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_PERIOD');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** RPD_COMPANY_PERIOD_TAB End *****

-- ***** RPD_COMPANY_PERIOD_DET_TAB Start *****

exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_394');
PROMPT CREATE TABLE RPD_COMPANY_PERIOD_DET_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   column_     Database_SYS.ColRec;
   table_name_ VARCHAR2(30) := 'RPD_COMPANY_PERIOD_DET_TAB';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID', 'VARCHAR2(100)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY', 'VARCHAR2(20)', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RPD_YEAR', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'RPD_PERIOD', 'NUMBER', 'N');
   Database_SYS.Set_Table_Column(columns_, 'REPORTING_DATE', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_DATE', 'DATE', 'Y');
   Database_SYS.Set_Table_Column(columns_, 'ROWVERSION', 'DATE', 'N');
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY', 'VARCHAR2(50)', 'Y', '$DEFAULT_NULL$');
   Database_SYS.Create_Or_Replace_Table(table_name_, columns_, '&IFSAPP_DATA', NULL, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_395');
PROMPT CREATE INDICES RPD_COMPANY_PERIOD_DET_PK, RPD_COMPANY_PERIOD_DET_RK ON RPD_COMPANY_PERIOD_DET_TAB

DECLARE
   columns_    Database_SYS.ColumnTabType;
   table_name_ VARCHAR2(30) := 'RPD_COMPANY_PERIOD_DET_TAB';
   index_name_ VARCHAR2(30) := 'RPD_COMPANY_PERIOD_DET_PK';
   rkidx_name_ VARCHAR2(30) := 'RPD_COMPANY_PERIOD_DET_RK';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'RPD_YEAR');
   Database_SYS.Set_Table_Column(columns_, 'RPD_PERIOD');
   Database_SYS.Set_Table_Column(columns_, 'REPORTING_DATE');
   Database_SYS.Create_Constraint(table_name_, index_name_, columns_, 'P', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'ROWKEY');
   Database_SYS.Create_Constraint(table_name_, rkidx_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_396');
PROMPT CREATE CONSTRAINT RPD_COMPANY_PERIOD_DET_UX1 ON RPD_COMPANY_PERIOD_DET_TAB

DECLARE
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := 'RPD_COMPANY_PERIOD_DET_TAB';
   constraint_name_ VARCHAR2(30) := 'RPD_COMPANY_PERIOD_DET_UX1';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'REPORTING_DATE');
   Database_SYS.Create_Constraint(table_name_, constraint_name_, columns_, 'U', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/


exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Timestamp_397');
PROMPT CREATE INDEX RPD_COMPANY_PERIOD_DET_IX1 ON RPD_COMPANY_PERIOD_DET_TAB

DECLARE
   columns_         Database_SYS.ColumnTabType;
   table_name_      VARCHAR2(30) := 'RPD_COMPANY_PERIOD_DET_TAB';
   index_name_      VARCHAR2(30) := 'RPD_COMPANY_PERIOD_DET_IX1';
BEGIN
   Database_SYS.Reset_Column_Table(columns_);
   Database_SYS.Set_Table_Column(columns_, 'RPD_ID');
   Database_SYS.Set_Table_Column(columns_, 'COMPANY');
   Database_SYS.Set_Table_Column(columns_, 'ACCOUNTING_DATE');
   Database_SYS.Create_Index(table_name_, index_name_, columns_, 'N', '&IFSAPP_INDEX', NULL, TRUE, TRUE);
END;
/

-- ***** RPD_COMPANY_PERIOD_DET_TAB End *****


-----------------------------------------------------------------------------------------
UNDEFINE MODULE
exec Installation_SYS.Log_Detail_Time_Stamp('ACCRUL','900.upg','Done');



